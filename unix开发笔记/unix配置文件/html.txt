HTML
    学习网页:   http://www.w3scholl.com.cn/html/index.sap
            http://www.runoob.com

1. HTML 简介
      HTML, Hyper Texture Markup Language , 超文本标记语言
      在计算机中以 .html , .htm 作为拓展名存在.
      可以被浏览器访问, 就是经常见到的网页.


2. HTML 特点
      语法非常简洁, 较松散, 以相应的英语单词关键字进行组合
      html 标签不区分大小写
      大多数标签是成对出现的, 有开始, 有结束, 和json 差不多.
      不成对出现的称之为 短标签.
      标签中的嵌套应用非常多, 标签嵌套标签,可以实现很多功能. 


3. 标签中的属性和属性值
      属性="属性值"
          属性值建议加双引号, (双, 单引号, 不加也可以)



4. html 组成部分
      <!doctype html>  声明文档类型, 必须写在文件开头
      <html>  文档的头部号 和 主体内容  </html> 根标记
        <head>  里面存在一个 <title></title> 文档的头部信息 </head> 只能有一对
            <title> 显示在浏览器窗口的标题栏中"网页名称" </title> 位于 head 标签之内
        <body> </body>  主题标记位于 <html> 之内, <head>标签之后
    <!-- 注释 -->
      
    例:
      <html>
        <head>
            <title> 这是一个标题 </title>
        </head>

        <body>
            <font color="red" size="5"> hello, world </font>    // 修饰 he 这个文本进行显示
        </body>
      </html>



-----------------------------------------------------------------------

文字和标题标签


1. 文本标签 : 用来修饰文本的显示样式
     <font> 文本内容 </font>
      属性:
         color : 文字颜色
            表示方式:   
                英文单词 : red, green, blue ...
                使用16进制的形式表示颜色 : #ffffff -- (rgb)
                使用 rgb(255,255,0)

         size : 文字大小
            范围 1 - 7     ( 7最大 , 1最小 )



2. 文本格式化标签
    -文本加粗标签
          <strong> 文本 </strong>
          <b>  功能和 strong 一样 </b>
            工作里尽量使用strong 
    
    -文本倾斜标签 
          <em> 文本 </em> 
          <i>  同上 </i>
            工作里尽量使用 em 

    -删除线标签
          <del> 文本 </del>
          <s>   同上 </s>
            工作里使用 del

    -下划线标签
          <ins> 文本 </ins>
          <u>   同上 </u>
            工作里使用 ins


3. 标题标签
     <h1> 标题文本 <h1>  // 最大
     <h2> 标题文本 </h2> // 其次
     ....
     <h6> 标题内容 </h6> // 最小
        1-6 依次变小, 自动换行



4. 段落
    <p> 正文 </p>
       特点:  上下自动生成空白行. 


5. 块容器:  里面什么都能放
     <div> this is a div element </div>
      用于没有语义含义的内容的块级容器(或网页的"划分"), 而且会自动换行.
        属性: align  -- 对齐方式
                left   左对齐
                center 居中
                right  右对齐  

    例:  <dir align="left"> 左对齐的文本或者图片 </dir>

    


6. 换行
    <br/>

7. 水平线 : 就是一个分割线
    <hr/>
        属性: 
            color: 3种表示方法,单词, rgb, #ffffff
            size : 1-7  分割线的宽度,  1最细,7最粗
            <hr color="red" size="3"/>      // 水平线 红色, 3号粗细  




-----------------------------------------------------------------------

列表标签

1. 无序列表 , 和代码排版差不多,只不过前面会多出个标记.
     标签
        <ul>
            <li>标签1</li>
            <li>标签2</li>
        </ul>

        属性: type
            实心圆圈 : disc  -- 默认
            空心圆圈 : circle 
            小方块   : square



2. 有序列表,  有编号的列表
    标签
        <ol> 
            <li> 标签1 </li>
            <li> 标签2 </li>
        </ol>

        属性: 
            type -- 序号
                1 -- 默认
                a -- 小写字母
                A -- 大写字母
                i -- 罗马数字小
                I -- 罗马数字大

            start
                表示从序号的什么位置开始
        例: <ol type="1" start="4">  <li>标签1</li>>  </ol>  //按数字排序 ,从4开始


3. 自定义列表
    标签
        <dl>
            <dt> 标题1 </dt>
                <dd> 解释标题1,这个没有序号 </dd>
                <dd> 解释标题2,这个没有序号 </dd>
            <dt> 标题2 </dt>
                <dd> 解释标题1,这个没有序号 </dd>
                <dd> 解释标题2,这个没有序号 </dd>
        </dl>

    这个自定义前面没有序列号的.


-------------------------------------------------------------------------


图片标签
    <img src="图片文件相对路径" alt="简介" title="提示文本" width="300" height="200" />
        属性:
            src  : 图片的来源, 必须写的属性, 就是图片的相对路径
            alt  : 替换文本, 图片不显示的时候显示的文字
            title: 提示文本, 鼠标放到图片上显示的文字
            width: 图片宽度, 可以使用百分比 , 和数字
            height: 图片高度  可以使用百分比, 和数字
        注意:
            图片没有定义宽高的时候, 图片按百分之百比例显示
            如果只更改图片的宽度或者高度, 图片等比例缩放. 就是一个正方形了.



-------------------------------------------------------------------------


超链接标签
1. 超链接标签
    <a href="http://www.baidu.com" title="百度" target="_blank"> 超链接 </a>
        属性:
            href  : 去往的路径( 跳转的页面 ) 必写属性
            title : 提示文本, 鼠标放到超链接上显示的文字
            target - 如何打开将要跳转的页面
                _self : 默认值, 在自身网页打开,(就是自身网页, 打开超链接页面)
                _blank: 打开新页面 ( 自身页面不关闭, 打开一个新的链接页面)
        实例: 
            <a href="http://www.baidu.com" > 百度一下 </a>
                页面上显示 百度一下 ,点击后在当前页面打开百度

2. 锚链接
    先定义一个锚点: <p id="sd" ></p>
    超链接到锚点: <a herf="#sd"> 会到顶点 </a>
        然后就会来到定义锚点的位置. 名字随便起.


3. 给图片设置超链接
    需要借助超链接标签和 图片标签相结合
    <div align="right">
        <a href="http://www.baidu.com" title="百度" target="_self"> 
            <img src="图片来源相对路径" alt="图片简介" title="提示文本" width="40%" />
        </a>
    </div>
        这样就能把一个图片设置为超链接, 而且变为右对齐



------------------------------------------------------------------------------


表格标签

    <table></table>
        属性:
            border -- 表格线的粗细,参数是 1-7
            bordercolor  -- 表格线颜色
            width  -- 宽度
            height -- 高度
            background -- 表格背景图片, 给图片的相对路径

        <tr></tr>  -- 行
            属性 
             align -- 对齐方式  , 设置一次就可适用于它包含参数的属性.
                center   居中参数
                left     左对齐
                right    右对齐

        <td></td>  -- 单元格(列)
            对其属性设置 同 tr


  例子      <table border="3" bordercolor="blue" width="500" height="500" background="./3.png">
                <tr align="center">
                    <td align="center">姓名</td>
                    <td>年龄</td>
                    <td>性别</td>
                </tr>
                <tr align="center">
                    <td>张3</td>
                    <td>23</td>
                    <td>男</td>
                </tr>
                <tr align="center">
                    <td>李四</td>
                    <td>24</td>
                    <td>女</td>
                </tr>
                <tr align="center">
                    <td>老王</td>
                    <td>56</td>
                    <td>不知道</td>
                </tr>
            </table>


        会出现 一个 3(列)*4(行)的蓝色边框的表格, 字是黑色的 ,底层图片是 3.png 



------------------------------------------------------------------------------









http 协议- 应用层
    -请求消息(Request) - 浏览器给服务器发
        四部分: 请求行,请求头, 空行, 请求数据
            请求行: 说明请求类型, 要访问的资源. 以及使用的http版本( 一般是1.1 )
            请求头: 说明服务器要使用的附加信息.
            空行:   这个空行是必须要求的, 即使没有请求数据.(一般是是使用'/r/n' 来进行换行的)
            请求数据: 也叫主体, 可以添加任意的其他数据.

      - HTTP1.1的五种请求方法 
      ○ GET
            请求指定的页面信息，并返回实体主体。 
      ○ POST
            向指定资源提交数据进行处理请求(例如提交表单或者上传文件). 数据包含在请求体中. 
                post请求可能会导致新资源的建立 和/或 已有资源的修改.
      ○ HEAD
            类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头
      ○ PUT
            从客户端向服务器传送的数据取代指定的文档的内容。
      ○ DELETE
            请求服务器删除指定的页面。
      ○ CONNECT
            HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。
      ○ OPTIONS
            允许客户端查看服务器的性能。
      ○ TRACE
            回显服务器收到的请求，主要用于测试或诊断。



        
          例-----------------------------------------
                <!-- 中间 ./ 是资源目录的根目录 -->
                <!-- 三部分内容有空格间隔, 并且和下面的内容之间没用空行 -->
                <!--如果是 post 那么会变成 POST HTTP/1.1 -->
            GET /3.txt HTTP/1.1     <!-- 后面有个 '/r/n' 这个换行 ) -->
            Host:localhost:2222     <!-- localhost就是127.1  2222 是服务器端口-->
            User-Agent:Mozila/5.0(X11;Ubuntu;Linux i686;rv:24.0) Gecko/201001 01Fierfox/24.0
            Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;9=0.8
            Accept-Language:zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3
            Accept-Encoding:gzip,defate          <!--默认数据是使用gzip压缩,然后发送给服务器的-->
            Connection:keep-alive               <!--表示 保持连接-->
            If-Modified-Since:Fri, 18 Jul 2014 08:36:36 GMT     <!--发送请求的时间-->
                <!-- 请求头: 由键值对构成的 ,  这一行必须是一个空行 /r/n -->
            请求数据(可以为空)   <!--如果是GET 则请求数据为空行,但是数据会显示在浏览器中-->
                <!-- 这个请求数据在 GET请求 时为空,数据都在最上面GET后面, 在post请求时不为空-->
            user=詹姆斯&pwd=James&sex=男    <!--这是post方法才会有的一行,而且不会显示在浏览器中-->




-------
    - 响应消息(Response) -服务器给浏览器发
        四部分: 状态行, 消息报头, 空行, 响应正文
            状态行: 包括http协议版本号, 状态码, 状态信息.
            消息报头: 说明客户端要使用的一些附加信息.
            空行: 这个空行是必须要有的.
            响应正文: 服务器返给客户端的文本信息.


    - HTTP常用状态码 状态代码有三位数字组成，第一个数字定义了响应的类别，共分 五种类别:
        ○ 1xx:指示信息--表示请求已接收，继续处理
        ○ 2xx:成功--表示请求已被成功接收、理解、接受
        ○ 3xx:重定向--要完成请求必须进行更进一步的操作,服务器会反馈一个正确的网址,然后浏览器拿到后再去访问.
        ○ 4xx:客户端错误--请求有语法错误或请求无法实现 
        ○ 5xx:服务器端错误--服务器未能实现合法的请求
        
        ○ 常见状态码和状态信息:
             200 OK             客户端请求成功, 一般都是回复这个
             400 Bad Request    客户端请求有语法错误，不能被服务器所理解
             401 Unauthorized   请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用
             403 Forbidden      服务器收到请求，但是拒绝提供服务
             404 Not Found      请求资源不存在，eg:输入了错误的URL, 一般服务器会回复一个404.html文件
             500 Internal Server Error     服务器发生不可预期的错误
             503 Server Unavailable        服务器当前不能处理客户端的请求，一段时间后可能恢复正常


        == http中的文件类型
            普通文件: text/plain; charset=utf-8 
            *.html : text/html; charset=utf-8 
            *.jpg : image/jpeg
            *.gif : image/gif
            *.png : image/png 
            *.wav : audio/wav 
            *.avi : video/x-msvideo 
            *.mov : video/quicktime 
            *.mp3 : audio/mpeg
            
            charset=iso-8859-1    西欧的编码，说明网站采用的编码是英文;
            charset=gb2312        说明网站采用的编码是简体中文;
            charset=utf-8         代表世界通用的语言编码;可以用到中文、韩文、日文等世界上所有语言编码上;
            charset=euc-kr        说明网站采用的编码是韩文;
            charset=big5          说明网站采用的编码是繁体中文;

   

         例------------------------------------

            HTTP/1.1 200 OK   <!--协议号, 200:状态嘛, 状态信息, 后面有个表,直接查-->
            Server:micro_httpd
            Date:Fri,18 jul 2014 14:34:26 GMT  <!--发送这个数据的时间-->
            Content-Type:text/plain; charset=utf-8 <!--这个必填, 告诉浏览器发送的数据是什么类型-->
            Content-Length:32   <!-- 响应正文的数据长度, 一般给 -1 , 但是不可以省略 -->
            Content-Language:zh-CN   <!-- 让浏览器显示页面为中文, 可以省略-->
            Last-Modified:Fri,18 Jul 2014 08:36:37 GMT  <!--响应正文的文件最后修改时间-->
            Connection:close <!--连接状态. 这个可以省略不写 -->
                <!--空行, '\r\n' -->
            响应正文. 就是一堆浏览器请求数据的文件的内容.
            <!--结束-->





----------------------------------------------------


http 在请求的时候 会请求一个图标文件,  那就是资源目录下的名为
  favicon.ico   这个图标文件, 不用写入代码中, 只要有这个文件就行了.
  










            