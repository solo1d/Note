ls -l 命令后第一个字符详解:(一共有七种). -rwxrwxrwx 1 pi pi 1 1月 temp.c
        - 普通文件  可执行程序和压缩包也是普通文件.
        d 目录
        l 符号连接,就是快捷方式
        p 管道
        s 套接字
        c 字符设备, 键盘,鼠标之类的
        b 块设备, u盘 ,硬盘之类的

    文件权限后面的 1 是硬链接计数. 如果这个硬链接计数变成0,那么inode节点就会被删除,而且清除指向的磁盘空间内容.
    目录的大小永远都是4kb 的大小,与目录内的内容无关.
    

ls -R    以文件夹分类显示里面的内容,一个文件夹占一个单独的列项.


------------------------------------------------------------------------ 
cd -    从最后访问的两个目录之间互相切换; cd ~; cd /etc ; cd - 来到了~; cd - 来到了/etc;


cp 文件名 文件名  ;  如果被拷贝的文件名b被别的文件占用的话,b会被覆盖,b原有内容丢失,变成了a中的内容;
cp -r 文件夹/ 文件夹/; 将a文件夹中的内容递归拷贝到 b文件夹中,如果b 不存在那么会被直接创建; -r 参数是递归拷贝的意思;


软链接:
ln -s 绝对路径+文件名或目录 软连接文件名;  // 一定要写绝对路径来创建.
硬链接:
ln  文件名 硬链接的名字;   // 相对路径和绝对路径都可以.他会增加源文件的硬链接计数.
                                                // 这个主要作用是节约磁盘空间. 在其他多个目录中管理硬链接指向的数据块进行同步.


------------------------------------------------------------------------ 
修改权限:    目录一定要有执行权限, 否则会无法进入这个无x 权限的目录内.
chmod who[+|-|=]mode 文件名 
    who: u - user,  文件所有者
         g - group, 文件所属组
         o - other, 其他人
         a - all,   所有人(如果前面什么都不写就默认这个选项)
    +|-|=
     mode: r - 读            4         8进制的数.
           w - 写            2
           x - 执行          1
           - - 没有任何权限   0

    chmod -R   这个参数是递归设置权限,将文件夹内的所有文件全部递归修改.

chmod u-r,g-x ceshi;    // 把ceshi 文件的文件所有者的读权限添加 和 文件所属组的执行权限 取消.
chmod a-x ceshi;        // 把ceshi 文件的所有人的执行权限都取消,包括文件所有者,组,和其他人.
chmod 331 ceshi;        // 把ceshi 文件的所有者变成 wx, 组 wx ,其他人 x. 
chmod -142 ceshi;       // 把ceshi 文件的所有者去掉 x , 组去掉 r, 其他人去掉 w.


修改组 和 所有者的一些信息:    目录一定要有执行权限, 否则会无法进入这个无x 权限的目录内.

chown 新的所有者 文件名;   // 修改文件的所有者
chown 新的所有者:新的组 文件名; // 同时修改所有者和组.

修改文件所属组:    目录一定要有执行权限, 否则会无法进入这个无x 权限的目录内.
chgrp 新的组 文件名;    // 修改这个文件的所属组.


------------------------------------------------------------------------ 
     !固定格式:
    find 搜索的路径  参数  搜索的内容;
    grep 搜索的内容  参数  搜索的路径;


根据 文件名 查找: find
    find 查找的目录 -name "查找的文件名";      // 按文件查找 , 引用一定要加 !!!

根据 文件类型 查找:    f普通文件, d目录, l符号连接, p管道, s套接字, c字符设备, b块设备
    find 查找的目录 -type f   ;              // 在查找的目录下 寻找普通文件,f如果变成l 那么就是找目录.

根据 文件大小 查找:
    find 查找的目录 -size +10k ;   // 查找大于10k 的文件. -10k 就是小于10kb的文件. k必须小写,M大写.
    find 查找的目录 -size +10M -size - 20M  ;  // 查找大于10MB 小于 20MB 的文件.

根据 日期的 创建,访问,修改 查找:
    find 查找的目录 -ctime -n或者+n ; // -n 表示 n天以内创建的文件(较近), +n 表示 n天以前创建的(较远).
    find 查找的目录 -mtime -n或者+n ; // -n 表示 n天以内访问的文件 (访问).
    find 查找的目录 -atime -n或者+n ; // -n 表示 n天年内修改的文件 (修改).

根据 文件夹深度 查找:
    find 查找的目录 -maxdepth n ;  // 搜索 n层以下的目录,不许超过n.
    find 查找的目录 -mindepth n ;  // 搜索 n层以上的目录,可以超过n.

高级查找:
    find 查找的目录 -type d -exec shell命令和参数 {} \ ;   // 关键字-exec 先查找,然后执行shell命令来整理.
    find ./ -type d -exec ls -l {} \ ;    // 不要缺少空格. 查找自定目录,并列出该目录中文件的详细信息.

    find 查找的目录 -name "file" -ok shell命令和参数 {} \ ;  // 关键字-ok 先查找,然后给出选项让你选择y还是n.

             对比 -exec 和 -ok   ,ok仅仅比exec更加安全而已,但是却需要很多步的验证,效率低.

    find ./ -type d | xargs shell命令和参数 ;   // xargs,是个命令通过管道来实现和上面一样的目的,而且效率很高



根据文件内容查找: grep
    grep -r "查找的内容" 搜索的路径;      // 搜索路径中所有文件内容与"查找的内容"相匹配的文件.
    grep -r "查找的内容" 搜索的路径 -n ;      // -n 的作用是显示行号,就是搜索内容所在的行号.


