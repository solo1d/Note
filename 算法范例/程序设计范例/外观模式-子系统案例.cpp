/* 外观模式(Facade): 就是将复杂的子系统抽象到同一个的接口进行管理,外界只需要通过此接口与子系统进行交互,而不必要直接与复杂的子类系统进行交互.(Facade)外观角色: 为调用方,定义简单的调用接口(SubSystem)子系统角色: 功能提供者. 指定提供功能的类群(模块或子系统).*/#include <iostream>using namespace std;//子系统 1class SubSystem1{public:    void run(){        cout << "子系统一 运行..." << endl;    }};//子系统 2class SubSystem2{public:    void run(){        cout << "子系统二 运行..." << endl;    }};//子系统 3class SubSystem3{public:    void run(){        cout << "子系统三 运行..." << endl;    }};//子系统 4class SubSystem4{public:    void run(){        cout << "子系统四 运行..." << endl;    }};// 提供外观类class Facede{public:    Facede(){        pSystem1 = new SubSystem1;        pSystem2 = new SubSystem2;        pSystem3 = new SubSystem3;        pSystem4 = new SubSystem4;    }        void runSystem(){        pSystem1->run();        pSystem2->run();        pSystem3->run();        pSystem4->run();    }    private:    SubSystem1* pSystem1;    SubSystem2* pSystem2;    SubSystem3* pSystem3;    SubSystem4* pSystem4;};void test01(){    Facede* facede = new Facede;    facede->runSystem();}int main(){    test01();    }