/* 观察者模式 : 一个对象改变, 会引起其他对象一起改变 */#include <iostream>#include <list>using namespace std;// 抽象的英雄  抽象的观察者class AbstractHero{public:    virtual void Update() = 0;};// 具体的五个英雄  具体观察者class HeroA :public AbstractHero{public:    HeroA(){        cout << "英雄 A 正在撸BOSS"  << endl;    }    virtual void Update(){        cout << "英雄 A 停止撸BOSS, 待机状态..." << endl;    }};class HeroB :public AbstractHero{public:    HeroB(){        cout << "英雄 B 正在撸BOSS"  << endl;    }    virtual void Update(){        cout << "英雄 B 停止撸BOSS, 待机状态..." << endl;    }};class HeroC :public AbstractHero{public:    HeroC(){        cout << "英雄 C 正在撸BOSS"  << endl;    }    virtual void Update(){        cout << "英雄 C 停止撸BOSS, 待机状态..." << endl;    }};class HeroD :public AbstractHero{public:    HeroD(){        cout << "英雄 D 正在撸BOSS"  << endl;    }    virtual void Update(){        cout << "英雄 D 停止撸BOSS, 待机状态..." << endl;    }};class HeroE :public AbstractHero{public:    HeroE(){        cout << "英雄 E 正在撸BOSS"  << endl;    }    virtual void Update(){        cout << "英雄 E 停止撸BOSS, 待机状态..." << endl;    }};// 观察目标 抽象class AbstractBoss{public:    virtual void addHero(AbstractHero* hero) = 0;   // 添加观察者    virtual void deleteHero(AbstractHero* hero) = 0;  // 删除观察者    virtual void notify() = 0;  // 通知所有观察者};// 具体的观察者 BOSS Aclass BOSSA:public AbstractBoss{public:    virtual void addHero(AbstractHero* hero){    // 添加观察者        pHeroList.push_back(hero);    }    virtual void deleteHero(AbstractHero* hero){  // 删除观察者        pHeroList.remove(hero);    }    virtual void notify() {  // 通知所有观察者        for(list<AbstractHero*>::iterator it = pHeroList.begin();it != pHeroList.end(); it++){            (*it)->Update();        }    }public:    list<AbstractHero*>pHeroList;};void test01(){        // 创建观察者  英雄    AbstractHero* heroA = new HeroA;    AbstractHero* heroB = new HeroB;    AbstractHero* heroC = new HeroC;    AbstractHero* heroD = new HeroD;    AbstractHero* heroE = new HeroE;        //创建观察目标 BOSS    AbstractBoss* bossA = new BOSSA;    bossA->addHero(heroA);    bossA->addHero(heroB);    bossA->addHero(heroC);    bossA->addHero(heroD);    bossA->addHero(heroE);        cout << "heroC 阵亡..." << endl;    bossA->deleteHero(heroC);        cout << "boss 死了... 通知其他英雄停止攻击,抢装备..." << endl;    bossA->notify();    // 通知所有观察者  英雄            }int main(void){    test01();    return 0;}