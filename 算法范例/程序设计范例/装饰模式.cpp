/* 装饰模式: */#include <iostream>using namespace std;// 一般情况下  用继承实现类的拓展// 装修模式 可以动态给一个类增加功能.// 抽象的英雄 这里是英雄公有的行为class AbstractHero{public:    virtual void ShowStatus() = 0;public:    int mHp; // 血量    int mMp; // 魔量    int mAt; // 攻击    int mDf; // 防御};// 具体英雄class HeroA: public AbstractHero{public:    HeroA(){        mHp = 0; // 血量        mMp = 0; // 魔量        mAt = 0; // 攻击        mDf = 0; // 防御    }    virtual void ShowStatus(){        cout << "血量: " << mHp  << endl;        cout << "魔法: " << mMp  << endl;        cout << "攻击: " << mAt  << endl;        cout << "防御: " << mDf  << endl;    }};// 英雄穿上某个装饰物  那么他还是个英雄// 装饰物的基类class AbstractEquipment: public AbstractHero{public:    AbstractEquipment( AbstractHero* hero){        this->pHero = hero;    }        virtual void ShowStatus(){}    public:    AbstractHero* pHero;};// 衣服  狂推class KuangtuEquipment: public AbstractEquipment{public:    KuangtuEquipment(AbstractHero* hero):AbstractEquipment(hero){}        // 增加额外功能    void AddKungtu(){                cout << "英雄穿上狂徒之后... "  << endl;        this->mHp = this->pHero->mHp;  // 首先继承英雄原来的属性        this->mMp = this->pHero->mMp;        this->mAt = this->pHero->mAt;        this->mDf = this->pHero->mDf + 30;   // 新增的属性                delete this->pHero;    }        virtual void ShowStatus(){        AddKungtu();        cout << "血量: " <<this->mHp  << endl;        cout << "魔法: " <<this->mMp  << endl;        cout << "攻击: " <<this->mAt  << endl;        cout << "防御: " <<this->mDf  << endl;    }};// 无尽之刃class WujinzhiKnife:public AbstractEquipment{public:    WujinzhiKnife(AbstractHero* hero):AbstractEquipment(hero){}        // 增加额外功能    void AddWujin(){                cout << "英雄装备无尽之后... "  << endl;        this->mHp = this->pHero->mHp;  // 首先继承英雄原来的属性        this->mMp = this->pHero->mMp;        this->mAt = this->pHero->mAt + 80;        this->mDf = this->pHero->mDf;   // 新增的属性                delete this->pHero;    }        virtual void ShowStatus(){        AddWujin();        cout << "血量: " <<this->mHp  << endl;        cout << "魔法: " <<this->mMp  << endl;        cout << "攻击: " <<this->mAt  << endl;        cout << "防御: " <<this->mDf  << endl;    }};void test01(){        AbstractHero* hero = new HeroA;    hero->ShowStatus();    cout << "----------------" << endl;        //给裸奔的英雄穿上衣服    hero = new KuangtuEquipment(hero);    hero->ShowStatus();    cout << "----------------" << endl;        // 给英雄装备无尽    hero = new WujinzhiKnife(hero);    hero->ShowStatus();        }int main(void){    test01();    return 0;}