/* 外观模式(Facade): 就是将复杂的子系统抽象到同一个的接口进行管理,外界只需要通过此接口与子系统进行交互,而不必要直接与复杂的子类系统进行交互.(Facade)外观角色: 为调用方,定义简单的调用接口(SubSystem)子系统角色: 功能提供者. 指定提供功能的类群(模块或子系统).*/#include <iostream>using namespace std;// 电视机 类class Television{public:    void On(){        cout << "电视机打开..." << endl;    }    void Off(){        cout << "电视机关闭..." << endl;    }};// 电灯类class Light{public:    void On(){        cout << "电灯打开..." << endl;    }    void Off(){        cout << "电灯关闭..." << endl;    }};// 音响类class Audio{public:    void On(){        cout << "音响打开..." << endl;    }    void Off(){        cout << "音响关闭..." << endl;    }};// 麦克风类class Mircophone{public:    void On(){        cout << "麦克风打开..." << endl;    }    void Off(){        cout << "麦克风关闭..." << endl;    }};// DVD播放器class DVDPlayer{public:    void On(){        cout << "DVD播放器打开..." << endl;    }    void Off(){        cout << "DVD播放器关闭..." << endl;    }};// 游戏机class Gamemachine{public:    void On(){        cout << "游戏机打开..." << endl;    }    void Off(){        cout << "游戏机关闭..." << endl;    }};// KTV模式class KTVMode{public:    KTVMode(){        pTv = new Television;        pLight = new Light;        pAudio = new Audio;        pMicrophone = new Mircophone;        pDVD = new DVDPlayer;    }        void runKTV(){        pTv->On();        pLight->Off();        pAudio->On();        pMicrophone->On();        pDVD->On();    }        ~KTVMode(){                delete  pTv;        delete  pLight;        delete  pAudio;        delete  pMicrophone;        delete  pDVD;    }    public:    Television* pTv;    Light* pLight;    Audio* pAudio;    Mircophone* pMicrophone;    DVDPlayer* pDVD;};void test01(){    KTVMode *ktv = new KTVMode;    ktv->runKTV();    }int main(){    test01();    }