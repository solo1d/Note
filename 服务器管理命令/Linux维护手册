
终端乱码:   (下面两个解决方案)
    临时生效
        $export LANG=en_US.UTF-8
        $export LC_ALL=en_US.UTF-8

    永久生效->  修改 /etc/locale.conf  文件, 将下面的内容写入文件(会将系统变成英文)
        LC_ALL=en_US.UTF-8


关机前 应该使用 $sync 命令来将在内存的数据写会到硬盘中.
    关机脚本:  sudo sync && sudo sync && sudo shutdown -h now


文件类型
    l   链接文件
    b   设备文件 (通常指的是硬盘)
    c   一次性读取设备(输入设备,键盘鼠标之类的),不能够截断输出
    s   套接字(socket 套接字,主要用于网络通信)
    p   管道文件(解决多个程序同时存取一个文件所造成的错误文件)   


帮助命令 man 中帮助信息的解读:
    NAME        :简短的指令, 数据名称说明.
    SYNOPSIS    :简短的指令下达语法(syntax) 简介.
    DESCRIPTION :较为完整地说明.
    OPTIONS     :针对 SYNOPSIS 部分中, 有列举的所有可用的选项说明.
    COMMANDS    :当这个程序(软件)在执行的时候,可以在此程序(软件) 中 下达的指令.
    FILES       :这个程序或数据所使用或参考或链接到某些文件.
    SEE ALSO    :可以参考的, 跟这个指令或数据有相关的其他说明.
    EXAMPLE     :一些可以参考的范例.



登录提示信息文件 /etc/issue ,就是还未登陆前, 所显示的操作系统和内核版本以及时间.
登录之后的欢迎界面文件 /etc/motd   , 登录后  所提示的欢迎信息.


---------------------------------------------------------------------------------------

Linux 目录配置的依据 - FHS
  将 / 根目录和 /root ,/bin ,/etc ,/lib , /sbin 单独放到一个小的分区中.(为了安全性考虑)
  将 /var 目录独立出来,可以对系统的数据有一些安全性的保护.
  进行单人维护模式而仅挂载根目录时,该目录能够拥有root的主文件夹,root 的主文件夹与根目录放置到同一分区中.
    /bin     放置一般账号可使用的指令.(链接文件, 链接到 /usr/bin )
    /lib     开机启动时会用到的库函数,(这是个链接文件, 链接到 /usr/lib/ ) 
        /lib/modules     驱动程序(可抽换式核心模块).
    /media/  软盘,光盘(cdrom),DVD 等设备挂载.
    /opt/    或者 /usr/local   第三方软件安装的两个位置.
    /run/    放置开机后所产生的各项信息,和 程序以及服务启动后的 PID.
    /sbin/   开机,修复,还原系统所需的指令,以及设置系统环境和服务器软件程序的指令.(链接文件,链接到 /usr/sbin/ ) 
    /srv/    网络服务所提供的资料放置处.
    /tmp/    正在执行的程序暂时存放文件的地方.
    /usr/    Unix操作系统软件资源放置目录,该目录会很占用空间.(可以分享).
        /usr/bin/  一般用户能够使用的指令都放在这里,且不可有子目录.(和/bin目录一摸一样).
        /usr/lib/  基本上和 /lib 功能相同,所以 /lib 就是链接到此目录中的.
        /usr/local/  系统管理员在本机自行安装自己下载的软件,到这个目录下.
        /usr/sbin/   非系统正常运行需要的系统指令.(某网络服务器软件的服务指令).
        /usr/include/  c/c++等程序语言的文件开始(header)与包含档(include)放置处.
        /usr/libexec/  用于放置可执行文件或脚本.(桌面系统的一部分操作指令会在这里).
        /usr/lib/      与 /lib 功能相同.
        /usr/src/      一般源代码建议放到这里.(source)
            /usr/src/linux/  核心源代码放置到这里.
    /var/   主要为放置常态性变动的文件(高速缓存,登陆文件,软件运行产生的文件,驱动文件,Mysql数据库文件)
        /var/cache/  应用程序本身运行过程中会产生的一些暂存盘.
        /var/lib/    程序本身执行的过程中,需要用到的数据文件放置的目录.(Mysql放置到/usr/lib/mysql)
        /var/lock/   这是个链接文件,保证某设备或文件资源一次只能被一个应用程序所使用,如果有两个程序使用
                        一个设备时,会将文件或设备上锁 给一个程序来使用, 使用完成后再解锁给另一个程序
                        (目前这个文件夹指向的是 /run/lock/ )
        /var/log/    登陆文件放置的目录, 里面都是比较重要的文件(如/var/log/messages, /var/log/wtmp)
        /var/mail/   个人电子信箱目录.(是一个链接文件,连接到 /var/spool/mail/ )
        /var/run/    某些程序或是服务启动后,会将它们的PID放置在这个目录下.(链接到 /run).
        /var/spool   放置 排队等待其他程序使用的数据.
    /proc/ 这个目录时个虚拟文件系统(并不占据磁盘任何空间),数据都在内存中, 存放的是:
                系统核心, 进程信息, 主机设备信息 ,外接设备的状态信息, 以及网络状态等等.
    /sys/ 这个目录和/proc相似, 也是虚拟的文件系统(不占据磁盘空间),记录的是:
                核心 与 系统硬件信息较相关的信息.  包括目前已载入的核心模块与核心侦测到的硬件设备信息.



对目录拥有 x执行权限  可以进入该目录.
对目录拥有 r读权限    可以查看目录内的文件清单.
对目录拥有 w写权限    可以删除目录内的文件,修改文件名和目录名,创建新的文件和目录,拷贝文件.
    开放一个文件夹,那么至少具备 rx 两个权限.
 对文件拥有 r读取权限  才可以进行拷贝操作.
 修改文件所属组命令:  $chgrp  -R   组名    文件名      #参数-R表示递归修改,组名在 /etc/group 中, root命令
 修改文件拥有者命令:  $chown  -R   用户名  文件名       #用户名在 /etc/passwd 中,  root命令
                   $chown  -R  用户名:组名   文件名   #同时修改所属组,拥有者
 修改文件权限: $chmod  -R 777  文件名            #这些权限只针对文件内容,对文件是否可以删除没有关系.
             $chmod  -R u=w,g+r,o-x 文件名     #等于, 增加, 减少
             $chmod  -R a-x  文件名            #a表示所有人



SUID  这权限的标志是 s ,出现在 "文件拥有者 的x权限上 ", (-rwsr-xr--)
    SUID 仅可对二进制程序有效 ,  " 使用命令 $chmod 4777 文件   进行设置.(主要是 4 ) "
        执行者对该程序需要具有 x 的可执行权限.
        本权限仅在执行该程序的过程中有效 (run-time)
        执行者将具有该程序拥有者 (owner)的权限.
            (/bin/passwd  这个程序就是root的所有者, 当任何用户执行这个命令的时,会暂时获得root权限)
SGID  这权限的表示也是 s ,但是出现在 "所属组 的x权限上", (-rwxr-sr--)
    SGID 可以对程序或目录进行设置. " 使用命令 $chmod 2777 文件或目录   进行设置.(主要是 2 ) "
        程序:   程序执行者对于该程序来说,需要具备x的权限.
               执行者在执行的过程中将会获得该程序组群的支持.  (比如 locate 命令)
        目录: 使用者若对此目录具有 r 与 x 的权限时,该使用者能够进入次目录.
              使用者在此目录下的有效群组 将会变成该目录的群组.
              用途: "若使用者在此目录下具有w的权限(可以新建文件),该使用者所创建的新文件,该新文件的群组与
                     此目录的群组相同,但是所有者会是使用者"
SBIT  这权限的表示是 t ,出现在 "其他人 的x权限上". (-rwxr-xr-t)
    SBIT 可以对目录进行设置, " 使用命令 $chmod 1777 文件   进行设置.(主要是 1 ) "
        当使用者对此目录具有 w, x 权限,亦具有写入的w权限时.
        当使用者在该目录下创建文件或目录时,仅有自己与root才有权利删除该文件.
当用 " 使用命令 $chmod 7666 文件   进行设置.(主要是 7 ) "  设置文件时,会出现大S 和大T ,表示没有x权限.






只有 Ext2/Ext3/Ext4 传统的 Linux文件系统上面,隐藏属性才可以完整生效.(xfs文件系统只支持一部分)
设置文件隐藏属性, 一般都是root 才有权利来设置,而且安全性很高.
    $chattr [+-= 具体参数] 文件或目录
        +  -  =  增加,减少,设置  后面的具体参数
            具体参数:   A  :存取文件时,不会修改atime 读取时间. 可以提高I/O 速度.
                       a  :让文件只能增加数据 ,不可以删除或修改原有数据.
                       i  :让文件 不可以被 删除,修改,移动,链接,新增数据. 非常安全
                       u  :可以让被删除的文件的数据内容保存在磁盘上, 用于数据救援.
            例子:  #chattr +a -i  afile
查看文件被设置的隐藏属性
    $lsattr  参数   文件或目录
        参数:   -a :显示隐藏文件 
               -d :如果接的是目录,仅列出目录本身的属性而非目录内的文件名.
               -R :连同子目录也一并列出来 .

-------------------------------------------------------------------------------------------


命令 $pwd -P   可以得到确实的绝对路径,而非使用链接(link)路径.
命令 $mkdir    参数 -m可以直接设置权限 , -p可以递归创建目录.

PATH 环境变量的意义是: 可以用来指定 可执行文件执行的时候,执行搜寻的目录路径.
    命令  $echo $PATH   会输出可执行文件路径的变量 PATH 的值.
    指令  $PATH="${PATH}:绝对目录路径"     临时将可执行文件所寻路径加入到PATH 路径变量中.
umask 的优点:
    umask可以拿掉一些权限,因此适当的定义umask 有助于系统的安全,因为它可以用来创建默认的目录或文件权限.



命令 cp 常用选项和参数:     $cp  选项 来源文件  目标文件
    -a  :有 -d -r 和 --preserve=all 的意思,经常用来备份.(root或拥有者才可以正确的执行)
    -d  :当来源文件是 软链接 时,则复制 软连接 文件, (默认情况下是复制软连接指向的文件的内容).
    -i  :当目标文件已存在时,在覆盖时会先询问动作的进行(用作备份).
    -l  :创建硬链接.
    -p  :连同文件的属性(权限,用户,时间)一起复制过去,而非使用默认属性(备份常用).
    -r  :递归复制,用于复制目录.(和备份一起使用)
    -s  :创建软链接.
    -u  :目标文件 比 来源文件 旧(就是目标文件被修改过),才会进行覆盖式复制.
    --preserve=all   :比-p 的权限参数之外,还加入了 SElinux 的属性,links,xattr等 也复制了.
     可以有多个来源文件, 但是最后的目标文件就必须是目录了.( $cp a.c b.c c.c /tmp/c/ )


命令 rm 常用选项和参数
    -f  :忽略不存在的文件,不会给出警告讯息.
    -i  :互动模式,删除前会询问使用者 是与否 的动作.
    -r  :递归删除,最常用在目录删除.
    命令前加入 / 会忽略掉 alias 的指定参数, 就不需要在删除文件时 进行的 是与否 的动作.
            ( $ /rm -rf /tmp/* )

命令 mv  常用选项和参数:   $mv 选项  来源文件 目标文件
    -f  :强制,如果目标文件已经存在, 不会询问直接覆盖
    -i  :若目标文件已经存在, 就会询问是否覆盖.
    -u  :若目标文件已经存在, 且来源文件 比较新,才会更新.


------------------------------------------------------------------------------------------------
普通文本 文件内容查阅 命令:
    $cat  filename     #从第一行显示文件内容
        # -A 显示特殊字符和tab,  -n 带行号(空行也算一行), -d 带行号(空行不算)
    $tac  filename     #从最后一行开始显示, 进行倒序显示.
    $nl   filename     #从第一行开始显示,并且输出行号.
    $less filename     #一页一页的显示文件内容,并且可以翻页.
        #快捷键: 空格->下一页 , b->上一页, 回车->下一行, /串 搜索 , :f -> 当前文件名和行号, q退出
    $head filename     #只显示头几行
        # -n 数字  表示要显示几行.(也可以写负值,会将后面的行屏蔽. -10 ,不显示文件末尾的10行)
    $tail filename     #只看尾巴几行
        # 也适用于 -n 数字 选项, -f 表示持续侦测这个文件,一旦有新的写入信息就立即显示出来.
    $od   filename     #以二进制方式读取文件内容.
    $last filename     #读取 数据格式文件.
可执行文件 内容查阅命令:
    $od   [-t TYPE]  文件
        #-t 后面还会跟着参数 : c        使用 ASCII字符来输出. ($od -t c /bin/passwd )
        #                   d[size]   利用十进制来输出数据,每个整数占 size 字节.
        #                   f[size]   浮点数数值输出. 
        #                   o[size]   八进制为输出.   ($od -t cCc /etc/issue )
        #                   x[size]   十六进制输出.   
        # 详解: https://blog.csdn.net/qq_31246691/article/details/77282461




观察文件类型 命令 $file  文件名
    可以用来查看文件的类型:
        有可能是 ASCII
        有可能是 二进制可执行文件
        有可能是 data文件
        还可以查看 压缩包tar文件 使用的是哪种压缩功能.(非常有用)




命令文件名搜寻以及默认别名  $which 参数 命令或文件名
    $which  后面跟在 PATH 变量中的程序名. Bash内置的指令是搜寻不到的.

搜寻特定目录下的文件   $whereis  参数  文件名
        参数: -l  :列出 whereis命令会去查询的几个主要目录.
             -b   :只找 binary "可执行文件" 格式的文件,针对 "/bin/sbin"
             -m   :只找在说明文档 manual 路径下的文件
             -s   :只找 source "源文件 /usr/src/ 目录" 来源文件.

利用数据库来搜索文件名  $locate  参数  文件名
        参数:  -i  :忽略大小写的差异.
              -c   :不输出文件名, 仅计算找到的文件数量.
              -l   :仅输出几行的意思, 后面跟着数量,  "$locate -l 5 passwd "
              -S   :输出 locate 所使用的数据库文件的相关信息,包括该数据库记录的文件/目录数量等.
              -r   :后面可接正则表达式的显示方式.
    利用的数据库是 /var/lib/mlocate 数据库文件.
    因为搜寻的是数据库,所以有可能需要进行数据库更新, 命令是  $sudo updatedb   
    updatedb 会根据 /etc/updatedb.conf 的设置去搜寻系统硬盘内的文件名,并更新 /var/lib/mlocate 内的数据库文件

硬盘文件搜索命令:  $find  路径  选项  参数
        选项和参数: 
                -a  :是and 的意思,可以连续使用两次相同的 选项, "$find / -size +50k -a -size -60k"
                !   :取后面条件反向之意(前面要有 -a).   "$find /etc -size 50k -a ! -user root \; 
                                                       文件大于50k ,并且文件所属人 不是root "
                -o  :是 or 的意思,和sql 语句相似.
            1.与时间相关的选项和参数:
                 -mtime  n  :n天之前的 "那一天" 被改动过内容的文件
                 -mtime  +n  :n天之前的被改动过内容的文件,不包括n天本身
                 -mtime  -n  :n天之内被改动过内容的文件名
                 -newer  文件名 : 为一个存在的文件, 列出比 此文件还要新的文件 文件名.
                     "例: $find / -mtime 0   #将过去系统上面24小时内有改动过内容的文件列出"
                     "    $find / -mtime 3   #3天前的24小时内有变动过的文件"
                     "    $find / -mtime -3  #3天内被改动过的文件的文件名"
                     "    $find / -mtime +3  #大于3天前的被改动过的文件名,所有大于3天的"
            2.与使用者或群组名称有关的选项和参数:
                 -uid n  :n是数字,这个数字是使用者的账号 ID,就是 UID,记录在/etc/passwd
                 -gid n  :n是数字, 对应组群名称ID,就是GID, 记录在 /etc/group
                 -user name  : name 为使用者账号名称 !例如 pi
                 -group name : name 为群组名称.
                 -nouser  :寻找文件的拥有者不存在 /etc/passwd 的人.
                 -nogroup :寻找文件的拥有群组不存在于 /etc/group 的文件.
            3.文件权限及名称有关的选项和参数:
                 -name filename  :搜寻文件名称为 filename 的文件.
                 -size [+-]SIZE  :搜寻比SIZE要大(+) 还是小(-) 的文件,
                                  SIZE的规格有: c 表示字节,k表示kb. (-size +50K #比50kb大的文件)
                 -type TYPE    :搜寻文件类型为 TYPE 的. 类型主要有 : FIFO(p), 普通文件(f),
                                   设备文件(b,c), 目录(d), 链接文件(l), ssocket(s)
                 -perm mode    :搜寻文件权限刚好等于mode的文件, (0742或者rwxr-x--x)
                 -perm -mode   :搜寻文件必须全部囊括mode的权限的文件, (7777 会将所有其他权限的文件都列出来)
                 -perm /mode   :搜寻的文件 有其中任意一个权限和mode相同,就会列出来.
            4.额外可进行的动作 选项和参数:
                 -exec command  :command为其他指令, -exec 后面可再接额外指令来处理搜寻到的结果.
                 -print         : 将结果打印到屏幕上,  这个是默认动作,不用加.
                   " 例子  $find / -perm /7000 -exec ls -l {} \;   
                        {}表示find搜索到的结果, \; 表示额外动作结束符号, -exec 表示开始额外动作 "
        
        " /etc 下,文件大小 介于50k 到 60k 之间的文件, 并且将权限完整列出.
            $find /etc -size +50k -a -size -60k -exec ls -lh {} \;"




------------------------------------------------------------------------------------------------

文件时间参数
    mtime : 当前文件的 "内容数据" 被修改的时间.(和权限无关, $ls -l 默认显示这个时间)
    ctime : 当前文件的 "状态" 被修改的时间.(权限和属性被修改了之后,会更新这个时间)
    atime : 当文件内容数据被 "读取" 时的时间.

使用命令来查看文件的三种时间信息. (默认显示的是 mtime)
    $ls  -l  --time=atime  或者  $ls -l --time=atiime 

修改文件时间  或创建文件的 命令 touch
    $touch  [-acdmt] [可能会有的参数] 文件
        选项:  -a :  仅修订文件的 atime"读取时间"
              -c :  修改文件的时间,如果文件不存在,则不创建新文件.
              -d :  后面可以接欲修订的日期而不用目前的时间,也可以使用 --date="时间日期"
              -m :  仅修改mtime ;
              -t :  后面可以接欲修订的时间而不用目前的时间, 格式为 [YYYYMMDDhhmm],(201103300101)
              不加任何参数  就会创建一个空文件.

























