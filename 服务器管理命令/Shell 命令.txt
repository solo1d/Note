                                                  字体信息: 微软雅黑,常规,小四
文本内容简介: Shell 脚本编写 ,  命令别名  , 历史命令  ,  输入输出重定向 ,  


Shell 脚本以 .sh 后缀区分;
/etc/shells  :该文件中写入了 Linux 支持的 Shell版本  (bash 主版本);
$dos2nuix  [脚本文件.sh]   //将从win系统下的脚本变成unix可执行的;
/etc/profile  环境变量配置文件;

---------------------------输出重定向---------------------------------------------
              命令    >  文件名  ,覆盖输出    或者  命令    >>    文件  添加输出
       错误命令  2>  文件名                       错误命令   2>>   文件
无论对错命令   &> 文件名                无论对错命令  &>>   文件
 
        命令 >> 文件1   2>>文件2             正确输出到文件1,错误到文件2

--------------------------输入重定向----------------------------------------------
wc           [ 选项 ] [ 文件名 ]                (会返回统计的数据)
-c           统计字节数
-w          统计单词数
-l            统计行数


------------------------------------------------------------------------------------
输出命令
echo         [ 选项 ] [" 输出内容 "]    (输出内容不能加感叹号)
-e             支持反斜线控制的字符转换

               $echo  -e  "\e[1;31m abcd \e[0m"
               将abcd输出并染成红色
                \e[1;   开启颜色输出        31m 红色       \e[0m 关闭颜色输出

------------------------------------------------------------------------------------
Shell 脚本编写示例     (文件后缀  .sh )
         $vim   hello.sh           
         创建一个文件 .sh 并打开

vim:  #!/bin/bash                           //不能省略,代表我以下写的是shell脚本
         #The first program               //注释
         #Author : shenchao              //谁写的

        echo -e "测试脚本" 
结束;
脚本执行:
(1) 赋予权限直接执行
         $chmod 755 hello.ch
           赋予权限
         $ /root/hello.ch
           运行脚本
(2)通过 bash 调用执行脚本
         $ bash hello.ch
          Bash 直接执行

dos2nuix  [脚本文件.sh]   //将从win系统下的脚本变成unix可执行的



------------------------------------------------------------------------------------
历史命令 ( 查看输入过的所有命令 )
history           [ 选项 ] [ 历史命令保存文件 ]
-c              清空历史命令
-w             把缓存中的历史命令写入历史命令保存文件 ~/.bash_history


------------------------------------------------------------------------------------
命令别名  (如果想永久生效,应该修改该用户下的 /root/.bashrc 文件)
alias         别名 = ' 原命令 '                  //设定别名


------------------------------------------------------------------------------------
多命令顺序执行   (   ;   &&   ||    前后命令没关联)         管道符  ( |  前后命令有关联)

顺序   $ ls ;  vim                    //先执行 ls 然后执行 vim 
与      $ ls  && vim               //如果 ls 执行失败 , 则 vim 不执行
或      $ ls  ||  vim                  //如果 ls 执行成功 , 则 vim 不执行
                                                如果 ls 执行失败 , 则 vim 执行
         $  ls  &&  pwd   ||   rm          
         如果 ls 执行成功,则执行 pwd , 如果 pwd 执行成功,则 rm 不执行
         如果 ls 执行失败,则不执行 pwd ,如果 pwd执行失败,则执行 rm 命令
------------------------------------------------------------------------------------
管道符       连接两个命令
         $ ls | more         //  ls 的 正确 输出 作为 more 的操作对象
                                     如果 ls  报错了, 则 more 不能执行

         $netstat -an | grep --color=auto  "ESTABLISHED"
         从 netstat 结果中找到 ESTABLISHED 正在连接的用户,并用颜色显示出来
          
------------------------------------------------------------------------------------
通配符      ( ?  *  []  [-]  [^]   )
?              匹配一个任意字符
*              匹配0个任意多个字符,也就是可以匹配任何内容
[]             匹配中括号中任意一个字符,例如 : [abc] 代表一定到匹配一个字符,或者是a
                或者是 b  或者是 c
[-]            匹配中括号任意一个字符, - 代表一个范围 , 例如 : [a-z] 代表匹配一个小写
                字母
[^]           逻辑非,代表匹配 不是 中括号内的一个字符,例如 : [^0-9]代表匹配一个不是
                数字的字符


------------------------------------------------------------------------------------
磁盘复制命令
dd            [if=输入文件] [of=输出文件] [bs=字节数][count=个数]
if=输入文件              指定源文件或源设备
of=输出设备             指定目录文件或目标设备
bs=字节数                指定 一次 输入/输出 多少字节, 就是把这些字节看成一个数据块
count=个数              指定 输入/输出 多少个数据块

               $dd if=/dev/zero   of=/root/tesk  bs=1k  count=1024 ; date
               将zero文件写入到tesk中,一次输出1k ,输出 1024 次 ( 就是 1MB)
                date是时间命令,一起执行会有结束时间提示
------------------------------------------------------------------------------------


------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------

------------------------------------------------------------------------------------
