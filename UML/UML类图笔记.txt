UML使用规则和模型  (有范例图, 我都放在另一个文件内备份,有图片,有相应文件)
  软件建模的作用就是把源于现实世界的问题转换为计算机可以理解和实现的过程.

      现实世界 ---> 映射 ---> 计算机世界

  软件建模的实际过程后是从需求入手,用模型表达分析设计过程,最终将模型映射成软件实现.

      需求 ---> 建模 ---> 编码




  UML(统一建模语言): 是一种基于面向对象的可视化建模语言.
  UML 采用了一组形象化的图形(如类图) 符号作为建模语言,使用这些符号可以形象的描述各个方面.
  MUL 通过建立图形之间的各种关系( 如类与类之间的关系) 来描述模型.


  MUL一共有10种图 : 类图, 对象图, 包图, 组件图, 部署图, 用例图, 时序图, 协作图, 状态图, 活动图.

  MUL 中的关系主要包含 4 种:
      关联关系(association)  : 两个类,一个类把另一个类变成了自己的一个成员.
      依赖关系(dependency)  : 调用成员依赖于被调用成员,比如一个类中有另一个类的指针参数.
      泛化关系(generalization)  : 也就是继承关系, 子类继承父类.
      实现关系(realization)  : 类与接口之间的实现关系,比如 子类来实现父类的虚或纯虚函数成员.

------------------------------
用例图  (有范例图:基础图.mdj)

1) 用例图(Use case Diagram): 也称用户建模图,是从软件需求分析到最终实现的第一步,它是从客户的角度来描述系统功能的.
2) 用例图包含 3 个基本组件: 
    参与者(Actor): 与系统打交道的人或其他系统即 使用该系统和人和事物.在UML中参与者用人形图标表示.
    用例(Use Case): 代表系统的某项完整的功能. 在UML中使用一个椭圆来表示.
    关系 : 定义用例之间的关系 --- 泛化关系, 拓展关系, 包含关系.


 用例之间的关系- 泛化关系 : 表示同一业务目的(父用例)的不同技术实现(各个子用例). 
                          在 UML 中 用例泛化用一个三角箭头从子用例指向父用例.
 用例之间的关系- 包含关系 : 一个用例 可以包含其他用例具有的行为,并把它包含的用例行为作为自身行为的一部分,
                          在 UML 中 包含关系用虚线箭头加 "<<include>>" , 箭头指向被包含的用例.
 用例之间的关系- 扩展关系 : 如果在完成某个功能的时候 偶尔会执行另外一个功能,则用扩展关系表示.
                          在 UML 中 拓展关系用虚线箭头加 "<<extend>>", 箭头指向被扩展的用例.

------------------------------
类图(ClassDiagraml 这个选项)

    类图是面向对象系统建模中最常用的图. 是定义其他图的基础.
    类图主要是用来显示系统中的类,接口以及它们之间的关系.
    类图包含的主要元素有类,接口和关系. 其中关系有 泛化关系,关联关系,依赖关系和实现关系. 在类图中也可以包含注视和约束.

  类的表示方法:
  1) 类是类图的主要组件,由3部分组成, 类名,属性和方法. 在UML中类用矩形来表示,顶端放类的名称,中间部分存放类的属性,属性的
        类型及值,底部部分存放类的方法,方法的参数和返回类型.
  2) 在 UML 中可以根据实际情况有选择的隐藏部分或方法部分或两者都隐藏.
  3) 在 UML 中, public类型用 + 表示,private类型用 - 表示,protected用 # 表示.也可以自定义每个类型的表示符号.


  类之间的关系- 泛化关系(也就是继承关系)
  1) 泛化关系用来表示类与类,接口与接口的继承关系.泛化关系有时也称为 "is a kind of" 关系.
   在 UML 中, 泛化关系用 一条实线空心箭头 由自类指向父类. (Generalization 这个选项的箭头)


  类之间的关系- 实现关系 (子类来实现父类的虚或纯虚函数成员)
  在 UML 中, 实现关系用来表示 类与接口之间的实现关系.
   在 UML 中, 实现关系用 一条虚线空心箭头 由自类指向父类.(Realization)


  类之间的关系- 依赖关系 (调用成员依赖于被调用成员,比如一个类中的方法调用了另一个类的指针参数)
  对于两个 相对独立 的系统,当一个系统负责构建另一个系统的实例,或者依赖另一个系统的服务时,这两个系统之间体现为依赖关系.
   在 UML 中, 依赖关系使用 虚线小箭头  自调用成员指向被调用成员.(Dependency)


  类之间的关系- 关联关系 (两个类,一个类把另一个类变成了自己的一个成员)
  对于两个相对独立的系统,当一个系统的实例与另一个系统的一些特定实例存在 固定的对应关系 时,这两个系统之间为关联关系.
   在 UML 中, 关联关系使用 实线小箭头  自调用成员指向被调用成员.(Directed Association)
   
   关联关系的名称:关联关系可以有一个名称,用于描述该关系的性质.此关联名称应该是动词短语,因为他表明源对象正在目标上执行动作.


   关联关系的角色:当一个类处于关联的一端时,该类就在这个关系中扮演一个特定的角色.具体来说,角色就是关联关系中一个类对另一个
                类所表现的指责. 角色名称是名词或名词短语.

   关联关系的多重性:是指有多少个对象可以参与该关联,多重性可以用来表达一个取值范围,特定值,无限的范围.


   类之间的关系-聚合 (整体与部分之间是可以分离的,它们可以具有各自的生命周期,部分可以属于或共享多个整体对象,)
     1) 聚合关系是关联关系的一种,是更强的关联关系.
     2) 聚合时整体的部分之间的关系,例如汽车由引擎,轮胎以及其他零件组成.
     3) 聚合关系也是通过成员变量来实现的. 但是关联关系所涉及的两个类处在同一层次上,而聚合关系中,两个类处于不同层次上,
          一个代表整体,一个代表部分.
    在 UML 中, 聚合关系使用 棱形空心实线箭头  由部分指向整体. (Aggregation)


   类之间的关系-组合 (也称为强聚合,如果整体的生命周期结束,那么部分的生命周期也会结束)
     1) UML 类图关系中合成关系是关联关系的一种,是比聚合关系还要强的关系.
     2) 代表整体的对象负责代表部分对象的生命周期.
   在 UML 中, 组合关系使用 棱形实心实线箭头  由部分指向整体. (Composition)






















