c 中的多线程 ( 来自linux 和MAC OS)

thread  : 线程 
process : 进程     -> 有主进程和子进程之分

 
thread 和 process 相同的地方是 他们都是可以用来做并行运算,同时干多件事情,(但是cpu必须是多核).
thread 和 process 不同的地方是 thread 有共享内存, process没有共享内存.



-------------------
thread 线程 详解: (单个线程和多个线程)
// 编译命令是  gcc  文件名  -lpthread 
首先需要头文件 <pthread.h> 

pthread_mutex_t lock;      // 加锁, 变量.  lock 是一种 muntex_t 的数据类型,这种数据类型叫做 锁
pthread_mutex_init(&lock ,NULL);   // 初始化 锁, 加锁和解锁的过程会影响效率和程序运行时间

pthread_mutex_lock(&lock);    // 加锁
...  运行内容
pthread_mutex_unlock(&lock);  // 解锁


小心假共享.

----------------------------------------------------------------------------------------------------
范例:

/*
	多线程基本规范
	当使用 gcc 编译的时候,必须是这种格式   gcc c.c -lpthread   
	后面的 -o  改名参数 可有可无
*/
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

// 线程 pthread_create()  所需函数的必须格式,函数名可以改,但是参数和返回值绝对不能变动.死定义.
void* myfunc(void* args){
    int i;
    for(i = 1; i < 50 ; ++i){
        printf("%d \n",i);
    }
    
	return NULL;
}

int main(void){
	
// 首先创建一条新的线程 
    pthread_t th1;   // 类型是pthread_t 表示说th 是一条新的线程, 这里只是定义 ,而没有赋值.
    pthread_t th2;
    
    // 想让 th 线程 运行某个函数.
    // 函数详解: 一共需要四个参数. 1 线程的地址, 2 可以忽略 给NULL , 3 你要运行的函数 4, 运行函数需要的参数
    // 可以让两条线程同时运行,但是运行时间的快慢是有差异的,但是结果正确.
    pthread_create(&th1, NULL, myfunc, "th1");
    pthread_create(&th2, NULL, myfunc, "th2");
   

    // 这里只需要一个实体就可以,不需要指针的.
    // 这个函数表示的意思是等待这条线程结束.  如果不添加这个函数,那么会造成主进程直接结束,
    //  会导致子进程还没有运行就已经被回收了.
    pthread_join(th1,NULL);
    pthread_join(th2,NULL);
    
	return 0;
}
---------------------------------------------------------------------------------------

第二范例

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

typedef struct{
    int first;
    int last;
    int result;
}MY_ARGS;


// 让 th1 和 th2 线程来分别处理这个数组中的内容
int arr[5000];
int s1 = 0;  // 将th1 线程计算后的结果放入s1
int s2 = 0;  // 将th2 线程计算后的结果放入s2


// 线程 pthread_create()  所需函数的必须格式,函数名可以改,但是参数和返回值绝对不能变动.死定义.
void* myfunc(void* args){
    MY_ARGS* my_args = (MY_ARGS*) args;
    int first = my_args->first;
    int last  = my_args->last;
    
    int s = 0;
    int i;
    for(i = first; i < last ; ++i){
        s = s + arr[i];
    }
    my_args->result = s;

    return NULL;
}


int main(void){
    
    int i ;
    for( i=0; i<5000; ++i){
        arr[i] = rand() % 50;
    }
    

    // 首先创建一条新的线程 
    pthread_t th1;   // 类型是pthread_t 表示说th 是一条新的线程, 这里只是定义 ,而没有赋值.
    pthread_t th2;
    
    MY_ARGS args1 = { 0, 2500 ,0};
    MY_ARGS args2 = {2500, 5000, 0};
    
    // 想让 th 线程 运行某个函数.
    // 函数详解: 一共需要四个参数. 1 线程的地址, 2 可以忽略 给NULL , 3 你要运行的函数 4, 运行函数需要的参数
    // 可以让两条线程同时运行,但是运行时间的快慢是有差异的,但是结果正确.
    pthread_create(&th1, NULL, myfunc, &args1);
    pthread_create(&th2, NULL, myfunc, &args2);
   

    // 这里第一个参数只需要一个实体就可以,不需要指针的. 第二个参数是
    // 这个函数表示的意思是等待这条线程结束.  如果不添加这个函数,那么会造成主进程直接结束,
    //  会导致子进程还没有运行就已经被回收了.
    pthread_join(th1,NULL);      // 等待th1 运行结束
    pthread_join(th2,NULL);      // 等待th2 运行结束

    int s1 = args1.result;
    int s2 = args2.result;
    
    printf("s1 = %d\n",s1);
    printf("s2 = %d\n",s2);
    printf("s1 + s2 = %d\n",s1 + s2);
    return 0;
}

-----------------------------------------------------------------------------------------------------

范例3;

/*
    多线程基本规范
    当使用 gcc 编译的时候,必须是这种格式   gcc c.c -lpthread   
    后面的 -o  改名参数 可有可无
 锁会非常影响效率
*/
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t lock;      // 加锁, 变量.  lock 是一种 muntex_t 的数据类型,这种数据类型叫做 锁
    // 在程序开始的时候 要对所有的锁进行初始化

long s = 0;

void* myfunc(void* args){
    
    pthread_mutex_lock(&lock);    // 加锁
    int i = 0;
    for(i=0; i<100000; ++i){
        ++s;
    }
    pthread_mutex_unlock(&lock);  // 解锁
    return NULL;
}


int main(void){
    
  
    pthread_t th1;
    pthread_t th2;
    
    pthread_mutex_init(&lock ,NULL);   // 初始化 锁, 加锁和解锁的过程会影响效率和程序运行时间

    pthread_create(&th1,NULL, myfunc, NULL);
    pthread_create(&th2,NULL, myfunc, NULL);
    
    pthread_join(th1,NULL);      // 等待th1 运行结束
    pthread_join(th2,NULL);      // 等待th2 运行结束

    printf("s = %ld\n",s);
    return 0;
}


-----------------------------------------------------------------------------------------------------------
/*
    抑制了假共享, 增加了效率,  用空间换时间
*/
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define MAX_SIZE 500000000

typedef struct{
    int first;
    int last;
    int id;
}MY_ARGS;

int* arr;
int results[101];

void* myfunc(void* args){
    int i ;
    MY_ARGS* my_args = (MY_ARGS*) args;
    int first = my_args->first;
    int last  = my_args->last;
    int id    = (my_args->id) * 100;
    
    for(i=first; i<last ; ++i){
        results[id] = results[id] + arr[i];
    }
}


int main(void){

    int i ;
    arr = malloc(sizeof(int)*MAX_SIZE);
    for(i=0; i<MAX_SIZE; ++i){
        arr[i] = rand() % 5;
    }
    results[0] = 0;
    results[100] = 0;
    
  
    pthread_t th1;
    pthread_t th2;
    
    int mid = MAX_SIZE/2;
    MY_ARGS args1 = {0,  mid, 0};
    MY_ARGS args2 = {mid,MAX_SIZE, 1};
    
    pthread_create(&th1,NULL, myfunc, &args1);
    pthread_create(&th2,NULL, myfunc, &args2);
    
    pthread_join(th1,NULL);      // 等待th1 运行结束
    pthread_join(th2,NULL);      // 等待th2 运行结束

    printf("s1 = %d\n",results[0]);
    printf("s2 = %d\n",results[100]);
    printf("s1 + s2 = %d\n",results[0] + results[100]);
    return 0;
}

-----------------------------------------------------------------------------------------------------------





process : 进程   详解:


 















