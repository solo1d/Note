man git-config   查看配置文件帮助

将不加入版本系统控制的文件名写入下面名字的这个文件, 就可以自动排除在外.支持正则表达式,和通配符. 空目录自动忽略.
    使用前需要在工作目录的根目录下创建这个 忽略文件
        .gitignore                  # 注释
           文件内容: *.b      作用: 忽略所有.b结尾的文件,不纳入到版本控制系统中.
                   !a.b      作用: a.b除外, 这个文件可以纳入到版本控制系统中.
                   /TODO     作用: 仅忽略根目录下的完全同名文件, 但不包括其他目录的. 例 sub/DODO  是不忽略的.
                   build/    作用: 忽略 build 目录下的所有文件. 包括二级和多级目录.
                   doc/*.txt 作用: 忽略doc目录下的.txt文件,但不包括doc目录下的二级目录中的同名文件.doc/a/a.txt
                   /*/a.txt        忽略所有二级目录中的所有a.txt文件. 但不包括三级目录和多级目录.
                   /**/*.txt       忽略所有目录中的所有.txt文件. 包括所有的多级目录.




-------------
一般新项目的本地和远程 初始化的流程:
    新建一个工作目录, 进入到里面
        $git init
        $git config --local user.name '名字'
        $git config --local user.email '邮箱'
        $git remote add origin  git@192.168.2.3:solo1d/mytest.github    
        $然后将本地的公匙添加到远程库. 
            生成本地公匙和私匙命令: $ssh-keygen -t rsa -C "你的邮箱" -f ~/.ssh/想要生成公匙和私匙的文件名名字 
             将私匙添加到本地的私匙列表中. $ssh-add -K ~/.ssh/私匙的文件名名字  
                 , 可以用 ssh-add -l  查看私匙列表, ssh-add -D 清空私匙列表 , 还可以定义 config 文件

        $echo '##new' > README.md && git add .  && git commit -am 'add README'
        $git push --set-upstream origin master  
            #或者 $git -u origin master
            # 新建一个分支的时候,也需要这条命令来提交和新建远程分支.


远程有项目,有新成员拉取和初始化流程:
    首先让新成员在本地生成公匙和私匙. $ssh-keygen -t rsa -C "你的邮箱" -f ~/.ssh/想要生成公匙和私匙的文件名名字 
        将私匙添加到本地的私匙列表中. $ssh-add -K ~/.ssh/私匙的文件名名字  
        然后再将这个新成员的公匙 添加到项目中(网页操作).
    接着是新成员本地仓库初始化操作:
            $git clone git@git@192.168.2.3:solo1d/mytest.github  mygit_work
            $git config --local user.name  '新成员名字'
            $git config --local user.email '新成员邮箱'
            #初始化完成了. 可以操作了.

        $git checkout -b develop origin/develop 
        如果远程分支多, 可以使用上面这个命令 创建本地的分支 来对应远程分支.这样就可以和远程分支以及内容保持一致.


-------------





git 常用命令
    获取状态
*       git status  获取当前工作的处于一个什么样的状态.
----
    获得版本库
*       git init    初始化一个新的仓库
                # 一般情况下使用 git init 直接来创建一个库
                    $git init --bare
                        # 这个命令是来创建一个裸库的, 一般不是开发者使用

*       git clone   将远程版本库复制一份到本地
            $git clone git://github.com/schacon/grit.git 
                    # 将 github上 schacon 用户的 grit 项目复制到本地的当前所在文件夹.
            $git clone git@github.com:solo1d/grit.git 
                    # 将 github上 schacon 用户的 grit 项目复制到本地的当前所在文件夹.
            $git clone git@github.com:solo1d/grit.git  ~/new_mkdir
                    # 将 github上 schacon 用户的 grit 项目复制到本地的指定用户目录下的new_mkdir目录中


    如果远程库中包含了 submodules 的话就需要在复制后重新初始化 submodules 和更新.
           
    注意当使用了 submodule 之后, 新来的成员的新git仓库的初始化方式会有变化:

第一种初始化方法
    $git clone git@github.com:solo1d/git_parent.git  git_parent2
        # 复制远程版本库 solo1d用户的 git_parent项目,到 git_parent2这个新目录(执行前不能存在).但没有依赖项目. .但没有依赖项目.
    $cd  git_parent2     #来到这个新目录
    $git submodule init
        #初始化 submodule
    $git submodule update --recursive
        #执行submodule 递归更新.  这个时候就可以了.已经把所有内容都拉取回来了.
    $cd mymodule && git checkout master
        #进入依赖项目文件夹, 并且进入 master这个分支. 如果不进入那么会在一个 sha1 值的分支上.

第二种初始化方法
    $git clone git@github.com:solo1d/git_parent.git git_parent3 --recursive 
        #复制远程版本库, 并且将依赖的项目也一并复制过来.
        $cd mymodule && git checkout master
            # 顺便切换一下依赖项目所在分支.




----
    版本管理
*       git add     将当前已修改的文件纳入到暂存区当中
                $git add text.txt   将text.txt 这个文件纳入到暂存区中.
                $git add .          将工作目录下所有的文件全部纳入到暂存区, 非常常用
               
*               $git remote add origin https://github.com/solo1d/gitlecture.git
                      #使用git远程命令, 添加一个远程地址, origin 代表后面的一串地址(远程仓库).后面命令用origin代替网址
                      # 就是创建一个远程仓库, 并且和本地做关联, 从本地->远程, 仅仅是绑定.
                $git remote rm origin 
                        # 这是绑定出错的删除操作,  删除后重新绑定就好了.


*       git commit  将暂存区当中的文件纳入到版本库中
                $git commit -m '提交注释和说明'       提交和注释说明
                $git commit --amend  -m '修正说明'   修改上次一提交的注释和说明, 而且不是二次提交.
                $git commit -am '提交注释和说明'      提交所有已经修改的文件, 可以省略git add. 这步.不可以对新文件使用
                $git commit --amend --reset-author  重新修改提交的用户配置信息.


*       git rm      删除工作目录当中一个特定的文件, 将被删除的文件纳入到暂存区.
                $git rm text.txt       删除工作区的text.txt文件, 删除后可以直接提交.
                $git rm --cached file  将文件或者目录从暂存区中移除.(但是工作内的实体还在)
                        若想恢复被删除文件,需要执行下面两个动作.
                             $git reset HEAD text.txt          将待删除的文件从暂存区恢复到工作区.
                             $git checkout -- text.txt         将工作区删除的这个修改丢弃. 文件恢复结束.
                        如果是使用系统的 rm 来删除的话 需要多进行一步, 将修改纳入到暂存区.在执行上面两步.
                             $git add text.txt


*       git mv      和系统mv相同,然后将操作纳入暂存区. 这个动作对于git来说就是删除一个文件,然后复制一份新名字文件.
                $git mv old.txt new.txt     将old.txt 重命名为 new.txt
                        若想恢复成原名,需要执行下面两个动作
                             $git reset HEAD old.txt      将待改名的文件从暂存区恢复到工作区.
                             $git reset HEAD new.txt      将新文件的文件从暂存区恢复到工作区
                             $git checkout -- new.txt     将工作区的修改操作丢弃,文件恢复完成.
                        这个时候会出现一个新文件和一个旧文件 同时存在, 可以删除一个. 然后再拉入暂存区.
                          如果是使用系统的mv 命令来改名, 也需要多一步操作
                             $git add new.txt old.txt      这样git就会自动识别到,这是个重命名操作.



*       git reset --hard HEAD^    回退到当前分支的上个版本,固定格式
                $git reset --hard HEAD^^    回退两个版本.
                $git reset --hard +哈希字串   回退到 哈希子串(commit ID)的版本, 曾经版本去 git reflog 中找.
                $git reset --hard HEAD~2    也是回退两个版本
        
*       $git reset HEAD +文件  将之前添加到暂存区的文件从暂存区移除出去.



----
    查看信息
        git help     获取帮助
        git log      查看提交日志
                 $git log -4      查看最近4条提交的日志消息.
                 $git log --pretty=oneline    查看简短的日志, 只显示ID 和提交说明.
                 $git log --pretty=format:"%h - %an,%ar : %s"    定制格式显示日志.
                 $git log --graph       图形化显示日志.
                 $git log  refs/remotes/origin/master   查看远程分支master的一个历史记录
        
        git reflog      操作日志和曾经版本的 commit ID, 回退版本和提交信息都可以去这里找.

        git diff        比较版本库和暂存区以及工作区文件的差别
                $git diff        比较暂存区文件和工作区文件之间的差别, -源文件, +目标文件
                $git diff HEAD   比较当前分支的版本库最新提交文件和工作区文件的差别, -版本库 +工作区, 可以换成commit ID
                $git diff --cached  +ID    比较当前版本库和暂存区之间的文件差别,  ID是commit ID ,也可以不写


        git blame +文件名    显示修订版和作者上次修改文件的每一行


*       $git remote show origin  与本地相关联的 origin 的详细信息. 和对应关系,全部详细的罗列出来.
            # 列表中的Fetch URL 是拉取地址(远->本).   Push 是推送地址.(本->远)

*       $git remote show         显示与我这个本地仓库有关联的远程名称.




----
    远程协作
        git pull    将远程版本库的文件拉取到本地
            $git pull origin dest:src
                #这个其实是完整版, origin 是远程库的别名, 从远程dest的分支来, 到 src 本地的分支上去
                # 作用也就是  将远程的 dest 分支推送到我本地的 src分支上去
                # 就是  从哪里来: 到哪里去

        git push    将本地版本库的内容推送到远程
            $git push origin src:dest   
                #这个其实是完整版, origin 是远程库的别名, src是本地分支的名字, dest 是远程分支的名字
                # 作用也是 将本地的 src分支 推送到远程 dest分支上. 
                    # 虽然名字可能不同,也可能相同,但是如果不同那么必须这么写 git push 本地分支名字:远程分支名字

        $git push --set-upstream origin develop    
                    # 将当前的本地的分支 develop, 推送到远程, 并且在远程也新创建一个 develop和他同名的分支.
                    # 而且将这两个分支关系对应上, 也就是说远程是这个分支的上游分支.
                    #  提示的信息 Branch 'develop' set up to track remote branch 'develop' from 'origin'.
                    #  意思是: 远程的develop的分支已创建, 而且它会追踪着来自origin的远程develop分支.

         $git push -u origin master
                    #将本地的master 这个分支上推送到远程, 并且将远程的master与本地的master做一次关联. 

         $git push origin develop
            # 将本地分支 develop 推送到远程, 而且在远程也会新建一个和这个名字相同的分支

         $git push origin  :develop
            # 推送一个空的分支给远程版本库中的 develop分支, 这就相当于删除分支.
            # 他会提示 [delete]  分支名字.  
              # 恢复操作, 在本地 未删除develop的情况下才能行.  $git push --set-upstream origin develop 

         $git push origin --delete develop
            # 这个是新版的远程分支删除写法. 等价于上面的写法, 提示也一样 ,但是更直观.

    
         $git push origin v1.0 v2.0 
                # 将本地标签 v1.0 和 v2.0 推送到远程
         $git push origin --tags
                # 将本地所有未推送到远程的分支,全部推送过去.





$git pull 和 $git push 原理: 它连续执行两个命令. git fetch 和 git merge origin/master 两个操作.




----
    修改配置文件
        git config --级别   包括 global用户级(在~/.中), local仓库级(在.git中), 文件名: config ,仓库优先级最高
               $git config --global user.name  "名字"     添加用户到用户级家目录中.
               $git config --lobal user.email "邮箱"      添加用户的邮箱到仓库目录中.  
                                                        system 是系统级别,等级最低

----
    分支
*       git branch       查看版本库中所有的分支, 前面有*号的表示当前所在的分支.
*       git branch +名字  创建新的分支
*               $git branch new_branch     创建一个新分支, 名字是 new_branch
*
*       git branch -d +名字       删除分支
*               $git branch -d  new_branch   删除这个分支
*               $git branch -D  new_branch   强制删除这个分支,忽略未合并错误.
        
*       git branch -m 旧分支名字  新分支名字    修改分支名字
*
*       git branch -v    显示当前所处的分支的最后一条提交记录和消息.
*       git branch -av   显示当前分支,网络分支,和commit号,库信息.





 *       git checkout +名字   切换到某个分支
 *               $git checkout new_branch    切换到 new_checkout 这个分支上
 *               $git checkout -- test.txt   丢弃掉相对于工作区中最后一次添加的文件内容所做的变更.
 *       git checkout -b new_branch2      创建一个新分支, 同时切换到这个分支.

*       $git checkout -b develop origin/develop 
            # 在本地新建一个develop分支, 它要跟远程分支 origin/develop 保持对应关系. 而不是master
            # 这个命令一般用在, 远程有个新分支, 而我 git push 之后,就会发现一个新的分支. 那么通过这条命令
            #     来追踪远程的这个分支, 这样就和提交的那个人相同了.
            #   第三个参数 devlop 可以改为其他名称, 并不是绝对和 origin/develop 相同.
        $git checkout --track origin/test 
            # 实现和上面相同的功能,只不过不能改名,  他只会在在本地创建一个和远程名字一摸一样的分支.





-------
    将当前工作内容暂存,并不提交和添加到暂存区.

        git stash save '说明'    将当前工作区的内容保存起来,但是和提交有区别
            $git stash save '临时存储'    保存了一个工作区现场, 备注是 临时存储
            $git stash list              查看保存的列表, 0号永远是最新的, 按时间顺延 新小 旧大
            
            $git stash apply             恢复最新的现场, 也就是0号.但不会删除list中的记录.需要手动删除
            $git stash apply stash@{1}   恢复列表中 1 号那个记录的现场, 而且不会删除.
            $git stash pop               恢复最新的现场,  还是0号, 但是会删除list中的记录.
            
            $git stash drop stash@{0}    手动删除 0 号记录.

----
    合并
        git merge +分支名字    合并分支 到 我目前所在的分支中(快进操作). 然后这两个的内容都与 分支名字 相同.
                $git merge new_branch    将new这个分支的内容,合并到我目前所在分支中.
            合并的时候可能会出现冲突, 当合并命令执行完之后, 需要手动去发生冲突的文件中改. 修改完成后再执行下面命令.
                    $git add  + 冲突的文件
                    $git commit

        git merge --on-ff +分支  重新建立一次新的提交, 将本分支和后面的参数分支进行合并, (新提交,而不是快进)
                    $git merge --on-ff new_branch2    两个分支合并后, 进行一次新的提交.


---
    标签
*       git tag     标签命令,一般是正式版本
            $git tag           
                #会弹出标签列表
            $git tag -l '内容'  
               #查找本地标签,内容可以使用通配符,  一般是 v*.* 什么的
            
            $git tag v1.0                   
                #创建一个本地轻量级标签
            $git tag -a v2.0 -m '标签说明'    
                #创建一个本地标签 并且添加说明

            $git tag -d v1.0     
                #删除本地 v1.0 这个标签
            $git show v1.0        
                # 显示本地标签 1.0的改动和内容

            $git push origin v1.0 v2.0 
                # 将本地标签 v1.0 和 v2.0 推送到远程
            $git push origin --tags
                # 将本地所有未推送到远程的分支,全部推送过去.
            $git push origin refs/tags/v7.0:refs/tags/v7.0
                # 将本地的 v7.0标签推送到远程的7.0标签(远程在推送前可以没有7.0这个标签), 这个是完整写法

            $git push origin :refs/tags/v6.0
                #删除远程标签 v6.0
            $git push origin --delete tag v5.0
                # 将在远程的标签 v5.0 删除掉   新版本的写法, 1.7
           
            $git fetch origin tag v7.0
                #将在远程的 v7.0 这个标签从远程拉取到本地.






----
    远程操作: 推送到远程版本库
            推送之前要先在工作目录创建和编写 README.md 文件.来初始化.
        gitHub的操作:  
                首先在网页端点击创建仓库(new repository), 
                    Repository  是仓库名(会作为url的一部分,就是网址)
                    Description 项目说明
                
             https的设置内容:
                网页创建完成之后的操作:
*                   $git remote add origin https://github.com/solo1d/gitlecture.git
                      #使用git远程命令, 添加一个远程地址, origin 代表后面的一串地址(远程仓库).后面命令用origin代替网址
                      # 就是创建一个远程仓库, 并且和本地做关联, 从本地->远程, 仅仅是绑定.
*                   $git push -u origin master
                      #将本地的master 这个分支上推送到远程, 并且将远程的master与本地的master做一次关联.
                  然后会弹出验证界面
                    Username for 'https://github.com':  后面是我的账户, 286233475@qq.com
                    Password for 'https://solo1d@github.com':  后面是我账户的密码
                  验证通过后会自动上传 而且提示.
                    验证之后可以使用 $git push 来将本地的 master 主分支进行推送.
                #https完成 ,缺点是每次都要输入账户和密码
             
*            ssh 的设置内容:
                网页创建完成之后的操作:
                    选择 SSH 连接, 然后复制后面的内容 一般是:   git@github.com:solo1d/gitlecture.git
                      然后使用添加一个远程地址.
*                      $git remote add origin git@github.com:solo1d/gitlecture.git
                        #使用git远程命令, 添加一个远程地址, origin 代表后面的一串地址(远程仓库).后面命令用origin代替网址
                    * 然后生成自己的公匙和私匙
*                      $$ssh-keygen -t rsa -C "你的邮箱" -f ~/.ssh/想要生成公匙和私匙的文件名名字
                         #然后两下回车就可以生成, 掠过的内容主要是需要密码. 可以回车跳过的,然后就生成了两个文件.
                        接着打开生成的公匙文件(你自己定义的.pub), 复制其中的内容, (私匙绝对不能拿出来. 文件内容短的是公匙)
                    随后打开网页来到项目页面, 进入Settings 中的 Deploy keys 的页面, 来设置公匙
                        点击 Add deploy key 来添加. *而且一定要把下面的 'Allow write access' 选上, 这是写入权限.
                           # key 填写 公匙的内容, (公匙内容比私匙短)
                        
                    随后将本地内容推送到远程并且在远程创建个 master的分支.下面两个命令二选一 (新远程项目才会使用)
                        $git push --set-upstream origin master:master
*                       $git push -u origin master        
                    #推送命令, 如果成功了就表示没问题了, 如果出错那么就是远程钥匙出了问题.
                    
                    紧接着输入以下命令,检测显示与我这个本地仓库有关联的远程.     
*                       $git remote show origin 
                #ssh完成.


        ----
            本地下的远程版本库操作

*               $git remote show         显示与我这个本地仓库有关联的远程名称.
*               $git remote show origin  与本地相关联的 origin 的详细信息. 和对应关系,全部详细的罗列出来.
                        # 列表中的Fetch URL 是拉取地址(远->本).   Push 是推送地址.(本->远)

*           $git clone +网址(ssh的)     将远程仓库的所有内容克隆到本地.需要在一个新文件夹内使用.
*               $git clone +网址 +字符串     将远程仓库克隆到后面字符串的文件夹内,就是改名字.

*           $git fetch     将远程的修改拉取到本地 并更新本地的远程分支. 但是他不会执行合并操作.(git merge)
            $git fetch origin tag v7.0
                #将在远程的 v7.0 这个标签从远程拉取到本地.
            $git fetch  origin master:refs/remote/origin/mymaster
                #将远程的 masert 拉取到本地的 mymaster  





  -----
**    将本地的一个新分支推送到远程,而且远程也没有这个分支.新建远程分支

                $git push --set-upstream origin develop:develop    
                    # 将当前的本地的分支 develop, 推送到远程, 并且在远程也新创建一个 develop和他同名的分支.
                    # 而且将这两个分支关系对应上, 也就是说远程是这个分支的上游分支.
                    #  提示的信息 Branch 'develop' set up to track remote branch 'develop' from 'origin'.
                    #  意思是: 远程的develop的分支已创建, 而且它会追踪着来自origin的远程develop分支.

*            $git checkout -b develop origin/develop 
                    # 在本地新建一个develop分支, 它要跟远程分支 origin/develop 保持对应关系. 而不是master
                    # 这个命令一般用在, 远程有个新分支, 而我 git push 之后,就会发现一个新的分支. 那么通过这条命令
                    #     来追踪远程的这个分支, 这样就和提交的那个人相同了.
                    #   第三个参数 devlop 可以改为其他名称, 并不是绝对和 origin/develop 相同.

*            $git checkout --track origin/test 
                    # 实现和上面相同的功能,只不过不能改名,  他只会在在本地创建一个和远程名字一摸一样的分支.



------
    远程操作: 删除远程版本库中的分支
        $git push origin  :develop
            # 推送一个空的分支给远程版本库中的 develop分支, 这就相当于删除分支.
            # 他会提示 [delete]  分支名字.  
              # 恢复操作, 在本地 未删除develop的情况下才能行.  $git push --set-upstream origin develop 

        $git push origin --delete develop
            # 这个是新版的远程分支删除写法. 等价于上面的写法, 提示也一样 ,但是更直观.

    删除掉远程分支之后同步的将本地分支也裁剪掉
        $git remote prune origin
            # 需要使用 git remote show origin 来查看远程分支状态,然后在执行, 这个命令会删除远程没有的本地分支.小心使用.
    
------
    远程操作: 重命名远程版本库的分支
        首先必须先把远程版本库拉取到本地. 然后删除远程版本库的某个分支
              $git pull        然后进入到要重命名的分支
              $git branch -m +旧分支名字  +新分支名字
              $git push origin --delete  +重命名的分支名字
              $git push --set-upstream origin +重命名完成的分支名字     这样就完成推送并且重命名了.
----
    远程操作: 重命名远程仓库
         首先重命名本地下的对应远程仓库的名字
            $git remote rename origin origin2
                #重命名本地的远程仓库名字, 但是远程仓库还是没有变的



----
    远程操作: 删除和添加远程仓库
         首先删除存留在本地的远程仓库的绑定信息
              $git remote rm origin
                #将本地的远程仓库信息删除了, git remote show 也不会显示远程信息 ,但是远程仓库和本地还是存在的.
        

         添加远程仓库
              $git remote add origin git@github.com:solo1d/gitlecture.git
                # 如果本地残留这个库的话,会直接复原. 如果没有会去远程拉取.


-------
    远程操作: 删除远程标签
        $git push origin :refs/tags/v6.0
            # 将在远程的标签 v6.0删除掉
        $git push origin --delete tag v5.0
            # 将在远程的标签 v5.0 删除掉   新版本的写法, 1.7




------
    $gitk     GUN管理界面,  如果启动失败 那么运行这个命令: brew cask install tcl
    $git gui   也是自带的图形管理界面.


------
    别名
        $git config --global alias.st  status      
            #将 ststus 应用于别名st, 作用域是用户级 ( >sys , <local仓库级), 会写入配置文件 ~/.gitconfig中
            # 只可以将 git *** 之类后面的*替换掉, 不可以替换外部命令, 如果要替换 就执行下面的.
                $git  st    // 这是替换之后的执行样子
        $git config --global alias.ui   ’!gitk‘
            #将 ui 应用于外部命令 gitk , 前面的! 表示这是外部命令, 而git命令则不需要.
                $git ui     // 这个替换之后会弹出ui界面,  跟$gitk 命令相同.



------

-------------------------------------------------------------------------------------------------


    git 裸库
        作用:是一个没有工作区的仓库(该目录直接就是 .git 目录中的内容),仅仅是用来存放和中转和提交开发者代码的区域.
            一般来说, 都是服务器端会存在裸库
            $git init --bare
                # 这个命令会在当前目录下创建一个裸库.






-------------------------------------------------------------------------------------------------    
submodule: 一个项目中包含和引用多个项目, 同时包含进来的项目配置文件会在 .git/modified 目录下(每个依赖就有一个文件夹)

*增加引用依赖项目

    # git_parent是引用项目, git_child是被引用的项目.
     $git submodule add git@github.com:solo1d/git_child.git mymodule
        # 在 parent 中执行, 将远程的 solo1d用户的 git_child 项目克隆过来, 并且需要一个新的文件夹来存放.
            # 执行完成后会多出 git_child项目的文件夹,还有一个git生成的  .gitmodules 文件.

       $git add .    
            # 将新引入的项目 添加到 git_parent 这个项目中.
        $git commit -m 'add submodule'
            # 在本地提交一次
        $git push 
            # 将引用这个操作推送到远程
    #推送完成后, 远程会多出一个文件夹 mymodule @ 146cfd(上面自定义的,后面是git_child项目的sha1值),点击后会进入
        # git_child  这个项目的页面中.

    更新引用过来的项目
        $cd mymodule     
            # 进入git_child 本地的这个项目目录中
第一种方法   $git pull
            # 这是一种方法,  可以拉取到 git_child 项目的最新修改.
第二种方法   $git submodule foreach git pull
            # 需要在git_parent 目录下执行, 作用是 遍历依赖的所有项目,然后对每个submodule执行 git pull操作拉取最新代码.

    当完成更新后,需要 $git add. 一次,和提交一次  $git commit -m 'update submodule' , 最好还需要$git push 到远程. 


 注意当使用了 submodule 之后, 新来的成员的新git仓库的初始化方式会有变化:

第一种初始化方法
    $git clone git@github.com:solo1d/git_parent.git  git_parent2
        # 复制远程版本库 solo1d用户的 git_parent项目,到 git_parent2这个新目录下(执行前不能存在).但没有依赖项目. 
    $cd  git_parent2     #来到这个新目录
    $git submodule init
        #初始化 submodule
    $git submodule update --recursive
        #执行submodule 递归更新.  这个时候就可以了.已经把所有内容都拉取回来了.
    $cd mymodule && git checkout master
        #进入依赖项目文件夹, 并且进入 master这个分支. 如果不进入那么会在一个 sha1 值的分支上.

第二种初始化方法
    $git clone git@github.com:solo1d/git_parent.git git_parent3 --recursive 
        #复制远程版本库, 并且将依赖的项目也一并复制过来.
        $cd mymodule && git checkout master
            # 顺便切换一下依赖项目所在分支.


*删除引用依赖项目
    首先将不需要的submodule从暂存区删除. 然后将实体文件从工作区删除, 然后将.git/submodule 目录删除.
        如果只是删除某一个依赖,那么会有一点点的区别, 就是挑选删除,不能全部删除.
            $git rm --cached mymodule    
                #将 mymodule 从暂存区中删除, 就变成了未跟踪状态.
            $rm -rf mymodule .gitmodules 
                # 使用系统命令 将mymodule从工作区删除. 以及.gitmodules配置文件. (.git/modules 删不删无所谓)
            $git commit -m 'remove submodule'
                #提交一次, 更新删除状态. 本地删除完成,  
            $git push 
                #更新删除状态到远程.  这样远程也删除完成了.



---------------------------------------------------------------





subtree 也是一种多重项目包含的命令(不是引用或者指针, 而是一个真正存在于该项目下的目录和文件). 可以使用$git subtree 来查看参数
    而且还能在包含项目中修改被包含的项目的代码,还能提交更新被包含项目的代码.

    首先在一个本地库下使用该命令添加一个远程库(本地库需要初始化完成,并且会关联一个远程库)
        $git remote add subtree-origin git@github.com:solo1d/git_subtree_child.git
            # 新添加一个远程库别名是 subtree-origin,关联到远程库, 可以使用$git remote show 来查看是否关联了.
  
        $git subtree add --prefix=subtree2  subtree-origin master   后面还有个可选参数(--squash)
            # 调用 subutree add --prefix 来将远程的被依赖的那个库的代码克隆到本地的 subtree2 这个自定义目录下
            # subtree-origin  是被依赖库的别名(上面那条命令定义的),  而且是从 mastre 分支拉取代码
            #而且 还有一个可选项 --squash 作用是将远程库的提交信息合并成一次提交并提交,继续合并本地两个仓库代码,进行第二次提交.
            #    被依赖的库的原本的提交还是存有的, 使用命令 $git log subtree2-origin/master   查看这个分支的提交历史.
        !!!!如果添加了这个 --squash 这个参数, 那么后面所有的命令全部都要添加这个参数, 否则会造成提交出错.!!!!!

        这样本地的创建就完成了,  可以在顶层工作区将修改推送到远程来进行同步.
            $git push



*     依赖项目如果更新的话需要如下命令来更新本地和远程的项目代码
        $git subtree pull --prefix=subtree2 subtree-origin master  后面还有个可选参数(--squash)
            #更新本地 包含项目的代码, 到目录subtree2 , 后面是和远程对应的仓库别名和分支, 并且会弹出一次提交信息:wq 就好了
            更新本地之后可以在工作区顶层更新远程库了
                $git push


*** 如果在创建的时候使用了 --squash 这个可选项来进行创建, 那么在更新的时候也必须加上这个命令,否则会报错导致无法合并.
        如果在创建的时候没有使用 --squash 这个可选项来进行创建, 那么在后面所有的操作中,绝对不可以使用这个参数.
    $git subtree add  --prefix=subtree2 subtree-origin master --squash
    $git subtree pull --prefix=subtree2 subtree-origin master --squash



*** 在本地修改被依赖的远程库的代码并且推送到远程,更新包含和被包含两个项目的远程库. 
        默认我已经修改了本地被包含项目的代码了. 而且在项目包含的时候使用了 --squash  这个参数!!!!
           
           首先在 工作区顶层目录下执行了 $git add .  && git commit -m '提交信息' 
                $git push
                   # 这个命令仅仅是更新了本地库对于的远程库, 被依赖的库是没有被更新的,(就是 git_subtree_child 库).
            
            然后执行更新 git_subtree_child 这个远程库,它所在的本库的代码.
                $git subtree push --prefix=subtree2 subtree-origin master  --squash
                    # 这样就更新了 git_subtree_child 这个远程库库中的源代码.



*** 更新本地被包含库 git_subtree_child 的命令
               $git subtree pull --prefix=subtree2 subtree-origin master  --squash
                    # 将被依赖的库 git_subtree_child 它所有的更改合并到本地. 不需要我提交.
               $git push  
                    # 再将修改提交到远程. 同步远程库.

-----
* 当是新成员使用新目录进行新建项目的时候需要的操作
        $git init && git config --local user.name 'xxx' && git config --local user.email 'xxx' 
        $git remote add subtree-origin git@github.com:solo1d/git_subtree_child2.git
        $git remote add origin  git@github.com:solo1d/git_subtree_parent2.git
        $git pull origin master:master
        $git branch --set-upstream-to=origin/master master
        #完成了, 这样就可以实现直接 git push 和 git pull 了
        # 参照网址 https://stackoverflow.com/questions/32056324/there-is-no-tracking-information-for-the-current-branch
        






-------------------------------------------------------------------------------------------------





将一个分支的提交内容, 复制到另一个分支上  git cherry-pick
    $git cherry-pick  +commitID
        # 后面是commitID 通过git log 查看, 需要在复制的分支上进行该命令. 一次复制一个提交,绝对不能跨越提交. 
        # 比如是把 dev分支的提交复制到 master上, 那么这个操作是在 master上,  后面的commitID 是dev的.就是被复制的
        # 而且这个复制并不是完全的拷贝, 而是另一种提交(前后的commitID 都不相同.)


    复制完成之后, 可能有恢复被复制分支到改动前的要求,那么操作如下.
        来到被赋值分支(比如是dev) , 并且确定需要还原的点(commitID, 比如是 a12bc ).
            $git checkout a12bc     
                #先来到这个commitID 的提交点上, 这个时候是游离状态.
            $git branch -D dev 
                # 删除dev 这个分支, (但是我们现在是被删除的游离状态的提交点,所以绝对不能切换到其他分支)
            $git branch -b new_dev
                # 通过这个游离状态的提交点创建了一个新分支. 然后这个游离状态就会变成这个分支.
         #恢复到未改动之前的操作结束









-------------------------------------------------------------------------------------------------






rebase , 将当前所在的分支变基到指定的分支上去.(tes->dev), 两个分支合并成一个支线.
    不要对master分支执行 rebase, 否则会引起很多问题. 而且它会修改曾经的分支的提交记录.
    一般来说,执行rebase的分支都是自己的本地分支,没有推送到远程版本库, 而且也绝对不能将这个分支推送到与他人共享的远程版本库分支.
        $git rebase dev
            # 直接在 需要被变基的分支上执行, tes->dev, 就是从tes和dev的共同指向的提交(可能需要回溯很多步) 开始,
            #  将当前所在的分支以补丁的形式一个一个的添加到dev目前最后一次提交的后面形成新分支(跟 merge dev 有很大区别). 
            # 执行完成后,原tes分支会被抛弃.tes会指向新的提交点.

        $git rebase --contiune
            #rebase 的执行过程也会出现冲突,需要手动解决冲突后,使用$git add 添加,然后执行g$git rebase --continue
            # 接下来 git 会继续引用于余下的补丁. 这是个循环过程.
        
        $git rebase --abort
            # 任何时候都可以通过这个命令来重置rebase, 分支会恢复到rebase开始之前的状态.

        $git rebase --skip
            # 放弃补丁分支的冲突修改(默认以dev为基础), 抛弃掉与tes的分支冲突部分.
    











--------------------------------------------------------------------------------------------------




master 是主分支.常用与发布系统和生产版本的分支

git有三个区域  工作区(work), 暂存区(stage), 版本库(master).

git文件状态
    文件的三种状态 , 同时有且只有其中一种状态.
        已修改 modified
        已暂存 staged
        已提交 committed

    git文件
        已被版本库管理的文件.
    已修改
        在工作目录修改git文件
    已暂存
        对已修改的文件执行git暂存操作, 将文件存入暂存区
    已提交
        将已暂存的文件执行git提交操作, 将文件存入版本库


HEAD 标记: HEAD文件是一个指向你当前所在分支的引用标识符, 该文件内部并不包含SAN-1值,而是一个指向另外一个引用的指针.
master 指向提交.


git 分支的命名规范 建议
    1. Gitflow   这是个模版, 配置很复杂.
    2. 基于Git分支的开发模型.
        develop 分支, (频繁变化的一个分支, 供开发人员之间协作开发,代码推送,代码合并)
        test    分支, (供测试与产品人等人员使用的一个分支, 变化不是特别频繁, 是从 develop 分支合并过来的)
        master  分支, (生产发布分支, 变化非常不频繁的一个分支, 是从test分支合并过来的 )
        bugfix (或 hotfix) 分支 ( 生产系统当中出现了紧急Bug, 用于紧急修复的分支, 然后 拉取合并都在 master 分支上)

关于Git分支最佳实践:
    1. 通常来说,Git分支会有以下几种
        1.1 master 分支
        1.2 test 分支
        1.3 develop 分支
        1.4 hotfix 分支

Git合并原则:
    Git遵循一个三方合并原则: 两个不同的人提交的两个分支, 和这两个分支指向的相同的上一个版本
        

去 github中的个人主页. 'SSH and GPG keys' 去添加自己的公匙,这样就可以在自己所有的项目中都可以使用了.不需要双密匙了.









---------------------------------------------------------------------

gitlab  安装
    官网: https://about.gitlab.com/install

  !! 这个网页有详细的介绍和安装步骤. 每个版本可能不同, 需要按照官网的去做(也可以按清华大学的). 绝对不能按下面的走.!!!

全部root执行:
    #curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash
     因为国内根本无法下载 github 上的 gitlab安装包 , 所以上面那条命令根本无法执行成功.需要离线包去下面这个网址下载离线安装包:
            https://packages.gitlab.com/gitlab/gitlab-ce
        # 里面的内容是安装包,需要注意系统, el/7 是centos7, 
        
        # 有个防火墙的命令需要注意, 如果出错,可能是你没有启动防火墙. 去搜索一下对应的怎么开防火墙.
        # 下面全都是依赖 还有个防火墙, 如果防火墙失败,那么就是没有启动防火墙,需要启动.
        $sudo yum install -y curl policycoreutils-python openssh-server
        $sudo systemctl enable sshd
        $sudo systemctl start sshd

        $sudo firewall-cmd --permanent --add-service=http
        $sudo systemctl reload firewalld

        $sudo yum install postfix
        $sudo systemctl enable postfix
        $sudo systemctl start postfix

    在没有出错的情况下使用接下来的命令:  <gitlab.rpm>

        $sudo rpm -i gitlab.rpm     // 默认我下载了离线安装包了.
        $sudo vim /etc/gitlab/gitlab.rb    // 修改这个文件中的设置    
                # 主要是修改这一行 ( external_url 'http://gitlab.com' )
                # 修改后面的ip地址域   ( external_url 'http://192.168.2.3' )
                # 配置为这台服务器的ip地址, 这个是对外提供网页访问的.
        #修改完成后执行下面的重读配置文件的命令
        $sudo gitlab-ctl reconfigure
                # 这个时候会刷屏和配置服务器, 出现Chef Client finished, 和 gitlab Reconfigured! 就算是成功了. 
        
        上面全都完成后,进入这个网页来进行配置和root密码设置,添加用户和权限之类的.
            http://服务器的ip
                #  第一次进入会直接提示让你输入两次密码.  这个是root密码.



------------
    gitlab 使用:
        一定要把项目放入组中, 这样方便管理. 组设置为  Internal 属性(只有组成员才能访问).


