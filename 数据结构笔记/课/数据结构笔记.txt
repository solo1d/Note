数据结构 是计算机存储,组织数据的方式.
  数据结构主要 研究非数值计算问题的程序中的操作对象以及他们之间的关系,不是研究复杂的算法.

  数据结构中的基本概念:
    数据 - 程序的操作对象,用于描述客观事物.
      数据是一个抽象的概念,将其进行分类后得到程序设计语言中的类型. 如 int, double ,float 等等.
    数据元素 - 组成数据的基本单位.
    数据项   - 一个数据元素由若干数据项组成.
    数据对象 - 性质相同的数据元素的集合(比如:数组,链表).

 例如 :  struct MyTeacher{   // 一种数据类型
            int age;        // 数据项
            char name[10];
            double List;
         };
        struct MyTeacher t1;  //数据元素
        struct MyTeacher t2[20];  // 数据对象  (这个是集合)
        strcpy(t1.name,"name");   // 数据项


算法和数据结构的区别是: 
    算法是为了解决问题而设计的.
    数据结构是算法需要处理的问题载体.
    数据结构和算法相辅相成.
----------------------------------------------------------------------------------------------------
算法 是特定问题求解步骤的描述,在计算机中表现为 指令的有序序列, 算法是独立存在的一种解决问题的方法和思想.
    对算法而言,语言并不重要, 重要的是思想.

   算法特性:
     输入: 算法具有 0 个或多个输入.
     输出: 算法至少有 1 个或多个输出.
     有穷性: 算法在有限的步骤之后会自动结束而不会无限循环,而且每一步骤可以在接受的是实际内完成.  
     确定性: 算法中的每一步都有确定的含义,不会出现二义性.
     可行性: 算法的每一步都是可行的,也就是说每一步都能够执行有限的次数完成.

   针对某一具体的问题,解决问题的算法并不是唯一存在的.

----------------------------------------------------------------------------------------------------

    线性表   是零个或者多个数据元素的有限序列.
    特性: 
        数据元素之间是有顺序的.
        数据元素个数是有限的.
        数据元素的类型必须相同.
        
    线性表的顺序存储结构,指的是用一段地址连续的存储单元依次存储线性表的数据元素.  
      
    线性表的链式存储结构,由一系列节点组成,每个节点包含两个域,一个数据域 一个指针域.
        优点:  无需一次性定制链表的容量.
              插入和删除操作无需移动数据元素.
        
        缺点:  数据元素必须保存后继元素的位置信息.
              获取指定数据的元素操作需要顺序访问之前的元素.
               
      
    顺序存储和链式存储的区别是:
             顺序存储使用的是 一块连续的内存空间.
             链式存储使用的是 不连续的内存空间.
      

    循环链表的最后一个元素可以指向链表的头结点,可以指向链表的第一个元素.
            (循环链表的第一个元素最好不要赋值,而是空的)

----------------------------------------------------------------------------------------------------

    受限线性表:   就是栈容器
        主要是先进后出的规则, 不能遍历, 只能读取最后进入的一个元素的内容,可以得到表内的元素个数,不支持查找.
     如果想访问栈中的元素, 那么必须要弹出它上面所有的元素 这样你才可以访问到它.

     受限线性表也分为 顺序表和 链表.   主要区别就是内存关系, 顺便是一整块连续内存, 链表是分散的内存.

     只能在一端(栈顶) 插入和删除元素.
    
    
    栈的应用1:  就近匹配( 匹配括号)
            1) 遍历,如果碰到非匹配的符号,直接略过( 如果匹配 '小括号' 那么不是小括号的全部略过).
            2) 碰到左括号 直接入栈.
            3) 碰到右括号 从栈中弹出符号,判断是否是左括号.
            4) 判断栈是否是空, 空的话,表明匹配成功,有左括号就没有匹配成功,需要打印出错误位置,
            
    栈的应用2:  中缀表达式转后缀表达式   8 + ( 3 - 1) * 5   ->   8 3 1 - 5 * +
            1) 遍历,碰到数字 直接输出.
            2) 碰到运算符号则考虑优先级, 乘除 > 加减 > 括号 , 如果栈顶元素优先级比读取到的优先级低,那么元素入栈.
                如果没有栈顶优先级高(或相等),那么将栈顶元素弹出并直接输出.然后读取到的元素入栈.
                如果匹配到括号那么直接将括号入栈(无论优先级),等匹配到右括号时将左括号前面所有元素全部弹出输出.
                然后把左括号也弹出,抛弃,括号不输出.
            3) 输出完成后,判断栈内是否还有元素存在,如果有就直接输出.
            
     栈的应用3:  计算后缀表达式   8 3 1 - 5 * +  ->   18
            1) 遍历, 碰到数字 直接入栈.
            2) 碰到符号,从栈中弹出第一个数字是右操作数,然后弹出第二个数字是左操作数,根据符号进行运算,将结果压入栈.
            3) 遍历结束, 栈中的唯一数字为计算结果.
            
    
----------------------------------------------------------------------------------------------------

     队列 :  先进先出 规则   分为顺序存储和链式存储. 内存方式不同. 

    不提供随机访问, 也不提供遍历,不提供查找.


----------------------------------------------------------------------------------------------------

    二叉树:
    完全二叉树 : 树内所有的节点必须拥有左节点,可以没有右节点,但是如果有右节点,那么必须要有左节点.而且不能出现
                右子树有左节点,但是左子树没有左节点的情况,那样就不是完全二叉树.横向数树不可出现断点.
    
    可以通过数组来存储完全二叉树的所有节点, 而且还可以通过某个节点的计算方式(2*i,i是元素下标).来得到这个节点
        的左子树的数据.通过2*i +1 可以得到这个节点的右子树数据. (叶子是没有节点的,这个算法适合非叶子节点).


    遍历的三种方法分别是 :    D根.L左.R右   

      (先序遍历 )DLR   - 即先根再左再右
      (中序遍历) LDR   - 即先左再根再右
      (后序遍历) LRD   - 即先左再右再根

    叶子节点: 在根的最末端,在这个节点下没有任何节点了,但是他有父节点.
    
 
    通过 中序遍历 和 先序遍历 可以确定一个树.
    通过 中序遍历 和 后续遍历 可以确定一个树.
    通过 先序遍历 和 后续遍历 无法确定一个树.
  

    #号法创建树 : 可以通过给出的先序或中序之类的遍历来还原二叉树的样子 的一种方法.


  二叉树非递归遍历:  需要借助栈(链式);
        将根结点取出,加入一个标示(false标示,表示不打印), 然后放入空栈内


typedef struct BINARYNODE {
    char ch;
    struct BINARYNODE* lchild;
    struct BINARYNODE* rchild;
}BinaryNode;      
#include "LinkStack.h"

#define MY_FALSE 0
#define MY_TRUE  1 

// 二叉树节点
typedef struct BINARYNODE {
    char ch;
    struct BINARYNODE* lchild;
    struct BINARYNODE* rchild;
}BinaryNode;

// 判断包装节点
typedef struct BITREESTACKNODE{
    LinkNode node;
    BinaryNode* root;
    int flag;
}BiTreeStackNode;

//创建栈中的节点
BiTreeStackNode* CreateBiTreeStackNode(BinaryNode* node , int flag){
    BiTreeStackNode* newnode = (BiTreeStackNode*)malloc(sizeof(BiTreeStackNode));
    newnode->root = node;
    newnode->flag = flag;
    return newnode;
}

// 非递归遍历 
void NonRecursion(BinaryNode* root){
    // 创建栈
    LinkStack* stack = Init_LinkStack();
    //把根结点扔到栈里
    Push_LinkStack(stack,(LinkNode*)CreateBiTreeStackNode(root,MY_FALSE));

    while(Size_LinkStack(stack) > 0){
        //先弹出栈顶元素
        BiTreeStackNode* node = (BiTreeStackNode*)Top_LinkStack(stack);
        Pop_LinkStack(stack);
        
        // 判断弹出的节点是否为空
        if(node->root == NULL){
            continue;
        }

        // 判断节点的状态
        if(node->flag == MY_TRUE){
            printf("%c",node->root->ch);
        }else{
            // 修改下面的压栈顺序就可以达到先序 中序 后序 遍历
            
            // 当前节点修改状态后入栈,
            node->flag = MY_TRUE;
            Push_LinkStack(stack,(LinkNode*)node);

            // 当前节点的右节点首先入栈
            Push_LinkStack(stack,(LinkNode*)CreateBiTreeStackNode(node->root->rchild,MY_FALSE));
            
            // 当前节点的左节点跟着入栈
            Push_LinkStack(stack,(LinkNode*)CreateBiTreeStackNode(node->root->lchild,MY_FALSE));
            

        }
    }
}


void CresteBinaryTree() {
    //创建节点
    BinaryNode node1 = { 'A',NULL,NULL };
    BinaryNode node2 = { 'B',NULL,NULL };
    BinaryNode node3 = { 'C',NULL,NULL };
    BinaryNode node4 = { 'D',NULL,NULL };
    BinaryNode node5 = { 'E',NULL,NULL };
    BinaryNode node6 = { 'F',NULL,NULL };
    BinaryNode node7 = { 'G',NULL,NULL };
    BinaryNode node8 = { 'H',NULL,NULL };

    
    // 建立节点关系
    node1.lchild = &node2;
    node1.rchild = &node6;
    node2.rchild = &node3;
    node3.lchild = &node4;
    node3.rchild = &node5;
    node6.rchild = &node7;
    node7.lchild = &node8;

    NonRecursion(&node1);
}

int main(void) {
    CresteBinaryTree();

    return 0;
}


----------------------------------------------------------------------------------------------------


    排序:  无序变有序.

    排序中的关键操作是  比较 和 交换.
        内排序 : 排序过程中,待排序的内容全部放置在内存中,而且是在内存中交换和排序.
        外排序 : 排序的记录个数太多,不能全部放在内存中,整个排序过程需要在内外存之间多次交换数据才能进行.

    排序的审判
        时间性能: 关键性能差异体现在比较和交换的数量.
        辅助存储空间: 为完成排序操作需要的额外的存储空间,必要时可以"空间换时间"
        算法的实现复杂性: 过于复杂的排序法会影响代码的可读性和可维护性,也可能影响排序的性能.

    排序是数据从无序到有序的过程.
    排序具有稳定性,是选择排序算法的因素之一.
    比较和交换是排序的基本操作.
    多关键字排序与单关键字无本质区别.
    排序的时间性能是区分排序算法好坏的主要原因.


    排序方法效率对比: 冒泡排序 < 选择排序 < 插入排序 < 希尔排序  

//----------标准格式- 什么都不用改可以直接使用-----------------------------
    #include <sys/timeb.h>              // 这个头文件内可以抓取时间到毫秒.
    long getSystemTime(void){       // 返回的 long 是毫秒单位
    struct timeb tb;
    ftime(&tb);
    return tb.time * 1000 + tb.millitm;
}
//-----------------------------------------------------------------------

冒泡排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//  -- 冒泡排序 修改版,一个标志量就可以提高程序效率-------- 

int flag = 0 ;  // 标志量   0标示没有排序好
// 冒泡排序
void BobbleSort(int arr[], int length){
    
    for(int i = 0; i < length && flag == 0 ; i++){
        flag = 1;  // 认为已经排序好了
        for( int j = i+1 ; j < length ; j++){
            if(arr[i] > arr[j]){
                flag = 0;
                Swap(&arr[i], &arr[j]);
            }
        }
    }
}
//----------------------------------------------------

选择排序- 比冒泡排序减少了交换次数~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//----------------------------------------------------

void SelectSort(int arr[], int length ){
    
   // 减少了交换次数 , 仅此而已
    for(int i = 0; i < length ; i++ ){
        int min  = i;  // 记录下标
        
        for(int j = i+1; j < length ; j++){
            if(arr[j] < arr[min]){
                min = j;
            }
        }
        
        if(min != i){  // 内层循环结束后,min会得到整个数组内的最小值的下标
            Swap(&arr[min], &arr[i]);
        }
        
    }
}
//----------------------------------------------------

插入排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    1 将无序的序列插入到有序的序列中. 把一个序列假设分成两个部分,一部分有序,一部分无序.
    2 插入排序在以下情况的效率最高    
        元素序列基本有序情况下,(较小的值基本都在左边,较大的值都在右边)
        元素个数比较小的时候

    将无序的序列逐渐的插入到有序的序列中.
//----------------------------------------------------
// 插入排序
void InsertSort(int arr[],int length){
    
    int j  = 0;
    for ( int i = 1 ; i < length ; i++){
        
        if(arr[i] < arr[i-1]){
            int temp = arr[i];
            for( j = i -1 ; j >= 0 && temp < arr[j];j--){
                arr[j+1] = arr[j];
            }
            arr[j+1] = temp;
        }
    }
}

//----------------------------------------------------

希尔排序~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    分组 插入排序
    先分组 然后会每一组分别进行插入排序

    希尔排序中必须有一个确定分组的增量, 算法是 元素的总个数 / 3 + 1  

    效率最好

//----------------------------------------------------

// 希尔排序算法
void ShellSort(int arr[],int length){
    
    int increasement = length;
    int i,j,k;
    do{
        // 确定分组的增量
        increasement = increasement / 3 + 1;
        
        for(i = 0; i < increasement ; i++){
            
            for(j = i + increasement; j < length ; j+= increasement ){
                
                if(arr[j] < arr[j-increasement]){
                    int temp = arr[j];
                    
                    for( k = j - increasement; k >= 0 && temp < arr[k]; k -=increasement){
                        arr[k+increasement] = arr[k];
                    }
                    
                    arr[k+increasement] = temp;
                    
                }
            }
            
        }
        
    }while(increasement > 1);
}

//----------------------------------------------------
  
快速排序:   分治法 + 挖坑填数
    分治法: 大问题分解成各个小问题,对小问题求解,使得大问题得以解决.
    挖坑填数

  先找一个基准数.然后以基数来末尾从右向左查找比它小的数,停下,然后放到原先基数存在的位置,然后在开头从左向右查找
 比基数大的数,放到末尾停下的位置, 如此循环,一直到两个指针指向同一个位置.然后把左右半部分递归循环.


 //--------------------------------------------------


//快速排序 从小到大
void QuickSort(int arr[], int start, int end){   // 数组 , 开始位置 一般是0, 数组元素总个数 -1 ;
    
    int i = start;
    int j = end;
    int temp = arr[start];   // 基准数,  所有的数都和他进行比较
    if( i < j ){
        
        while(i < j){
            
            // 从右向左去找比基准数小的
            while(i < j && arr[j] >= temp){
                j--;
            }
            
            // 填坑
            if(i < j){
                arr[i] = arr[j];
                i++;
            }
            
            // 从左向右 找比基准数大的
            while(i < j && arr[i] < temp ){
                i++;
            }
            
            if(i < j){
                arr[j] = arr[i];
                j--;
            }
        }
        
        //把基准数放到坑里  , 因为现在 i = j 所以放到哪里都一样
        arr[i] = temp;
        //对左半部分进行快速排序
        QuickSort(arr, start, i - 1);
        QuickSort(arr, i + 1, end);
    }
}


//--------------------------------------------------


    归并排序: 是建立在归并操作上的一种有效的排序算法,该算法采用分治法的一个非常典型的应用.
    基本思想: 将两个有序序列合并成一个有序序列.

    归并排序分两个部分, 一个是分组, 一个是合并.

//--------------------------------------------------

// 合并算法  从小到大
void Merge(int arr[], int start, int end, int mid, int* temp){
    int i_start = start;
    int i_end = mid;
    int j_start = mid +1;
    int j_end = end;
    
    int length = 0;  // 表示辅助空间有多少个元素
    
    // 合并两个有序序列
    while(i_start <= i_end && j_start <= j_end){
        
        if(arr[i_start] < arr[j_start]){
            temp[length] = arr[i_start];
            length++;
            i_start++;
        }else{
            temp[length] = arr[j_start];
            length++;
            j_start++;
        }
        
    }
    
    // i 这个序列
    while(i_start <= i_end){
        temp[length] = arr[i_start];
        i_start++;
        length++;
    }
    
    // j 这个序列
    while(j_start <= j_end){
        temp[length] = arr[j_start];
        j_start++;
        length++;
    }
    
    // 把辅助空间的内容覆盖到原空间
    for(int i = 0; i< length ; i++){
        arr[start+i] = temp[i];
    }
}

// 归并排序 中的分组
void MergeSort(int arr[],int start, int end,int* temp){
 
    if(start >= end){
        return;
    }
    
    int mid = (start + end) / 2;   //拿到数组中元素个数的半数
    
    // 开始分组
    
    // 左半边
    MergeSort(arr, start, mid, temp);
    
    //右半边
    MergeSort(arr, mid+1, end, temp);
    
    // 合并
    Merge(arr, start, end, mid,temp);
    
}


//--------------------------------------------------

 堆排序:     大顶堆 (从小到大,最大的数在顶部) ,小顶堆(从大到小,最小的数在顶部).


void MySwap(int arr[],int a, int b){
    int temp = arr[a];
    arr[a]   = arr[b];
    arr[b]   = temp  ;
}


/*
    @param myArr 待调整的数组(二叉树)
    @param index 待调整的节点的下标
    @param len   数组的长度
*/
void HeapAdjust(int arr[], int index, int len){

    // 现保存当前结点的下标( 父节点)
    int max = index;
    //保存左右孩子的数组下标
    int lChild = index * 2 + 1;
    int rChild = index * 2 + 2;

    if(lChild < len && arr[lChild] > arr[max]){
        max = lChild;
    }
    if(rChild < len && arr[rChild] > arr[max]){
        max = rChild;
    }

    if(max != index){
        // 交换两个结点
        MySwap(arr,max,index);   // max 和 index 都是下标, 交换arr 内两个下标内的值
        HeapAdjust(arr,max,len);
    }
}

// 堆排序
void HeapSort(int myArr[],int len){

    // 初始化堆
    for(int i = len / 2 -1; i >= 0; i--){
        HeapAdjust(myArr,i,len);
    }

    // 交换堆顶元素和最后一个元素
    for(int i = len -1 ; i >= 0 ; i--){
        MySwap(myArr,0,i);
        HeapAdjust(myArr,0,i);
    }
}







